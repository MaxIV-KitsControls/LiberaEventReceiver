/*----- PROTECTED REGION ID(LiberaEventReceiver.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        LiberaEventReceiver.cpp
//
// description : C++ source for the LiberaEventReceiver class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               LiberaEventReceiver are implemented in this file.
//
// project :     Libera BPM Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaEventReceiver.h>
#include <LiberaEventReceiverClass.h>

#include "LiberaClient.h"
/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver.cpp

/**
 *  LiberaEventReceiver class description:
 *    IT Libera BPM Event Receiver Device Server.
 *    The interface should be the same as for the Brillance model.
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name             |  Method name
//================================================================
//  State                    |  dev_state
//  Status                   |  dev_status
//  GetParameters            |  get_parameters
//  ReloadSystemProperties   |  reload_system_properties
//  MagicCommand             |  magic_command
//  AnnounceSynchronization  |  announce_synchronization
//  ForceInitSettings        |  force_init_settings
//  SetTraceLevel            |  set_trace_level
//  StartSynchronization     |  start_synchronization
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  PMNotificationCounter  |  Tango::DevShort	Scalar
//  OffsetTune             |  Tango::DevLong	Scalar
//  CompensateTune         |  Tango::DevBoolean	Scalar
//  PLLLock                |  Tango::DevBoolean	Scalar
//  T0Delay                |  Tango::DevLong	Scalar
//  RtcDecoderSwitch       |  Tango::DevShort	Scalar
//  McSource               |  Tango::DevShort	Scalar
//  T0Direction            |  Tango::DevShort	Scalar
//  T0OutputType           |  Tango::DevShort	Scalar
//  T0State                |  Tango::DevShort	Scalar
//  T1Source               |  Tango::DevShort	Scalar
//  T2Source               |  Tango::DevShort	Scalar
//  MgtOut                 |  Tango::DevShort	Scalar
//  T0inMask               |  Tango::DevLong	Scalar
//  T1inMask               |  Tango::DevLong	Scalar
//  T2inMask               |  Tango::DevLong	Scalar
//  T0idOutput             |  Tango::DevLong	Scalar
//  T1inFunction           |  Tango::DevLong	Scalar
//  T2inFunction           |  Tango::DevLong	Scalar
//  MCinMask               |  Tango::DevLong	Scalar
//  MCinFunction           |  Tango::DevLong	Scalar
//  T0Duration             |  Tango::DevLong	Scalar
//  InterlockID            |  Tango::DevLong	Scalar
//  T2EdgeFalling          |  Tango::DevBoolean	Scalar
//  T2EdgeRising           |  Tango::DevBoolean	Scalar
//  T1EdgeFalling          |  Tango::DevBoolean	Scalar
//  T1EdgeRising           |  Tango::DevBoolean	Scalar
//  T2IdInput              |  Tango::DevLong	Scalar
//  T1IdInput              |  Tango::DevLong	Scalar
//  T1Direction            |  Tango::DevShort	Scalar
//  T2Direction            |  Tango::DevShort	Scalar
//  SynchronizeLMT         |  Tango::DevLong	Scalar
//  RTCTimestamp           |  Tango::DevLong	Scalar
//  RTCTimestampState      |  Tango::DevLong	Scalar
//  T1State                |  Tango::DevShort	Scalar
//  T2State                |  Tango::DevShort	Scalar
//  T1Duration             |  Tango::DevLong	Scalar
//  T1idOutput             |  Tango::DevLong	Scalar
//  T2idOutput             |  Tango::DevLong	Scalar
//  T0IdInput              |  Tango::DevLong	Scalar
//  T2Duration             |  Tango::DevLong	Scalar
//  RtcT1inMask            |  Tango::DevLong	Scalar
//  RtcT2inMask            |  Tango::DevLong	Scalar
//  DDTriggerCounter       |  Tango::DevLong	Scalar
//  MCLock                 |  Tango::DevBoolean	Scalar
//  PLLClockGood           |  Tango::DevBoolean	Scalar
//  UserData               |  Tango::DevShort	Spectrum  ( max = 256)
//  logs                   |  Tango::DevString	Spectrum  ( max = 2048)
//================================================================

namespace LiberaEventReceiver_ns
{
/*----- PROTECTED REGION ID(LiberaEventReceiver::namespace_starting) ENABLED START -----*/

	//	static initializations
//Tango::DevUShort c_liberaModel(1); // BPM type
//const std::string c_timingBoard("evrx2");

/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::LiberaEventReceiver()
 *	Description : Constructors for a Tango device
 *                implementing the classLiberaEventReceiver
 */
//--------------------------------------------------------
LiberaEventReceiver::LiberaEventReceiver(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(LiberaEventReceiver::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::constructor_1
}
//--------------------------------------------------------
LiberaEventReceiver::LiberaEventReceiver(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(LiberaEventReceiver::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::constructor_2
}
//--------------------------------------------------------
LiberaEventReceiver::LiberaEventReceiver(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(LiberaEventReceiver::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void LiberaEventReceiver::delete_device()
{
	DEBUG_STREAM << "LiberaEventReceiver::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::delete_device) ENABLED START -----*/

	if (m_libera) {
        m_libera->Disconnect();
        delete m_libera;
        m_libera = NULL;
    }

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void LiberaEventReceiver::init_device()
{
	DEBUG_STREAM << "LiberaEventReceiver::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
    m_libera = NULL;
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(LiberaEventReceiver::init_device) ENABLED START -----*/

	//Set Trace Level Options //TODO refactor.

	//Stop before Set the new values.
	istd::TraceStop();
	//Set Level
	if (errorTrace.empty()) {
    	istd::TraceInit();
    	//Set Trace to Off
    	istd::TraceSetLevel(istd::eTrcOff);
    }
    else {
    	if(errorTrace[0] == 1) {
        	istd::TraceInit();
        	istd::TraceSetLevel(static_cast<istd::TraceLevel_e>(errorTrace[1]));
    	}
    	else {
    		istd::TraceInit("LiberaMciTrace.log", "/var/tmp/ds.log");
        	istd::TraceSetLevel(static_cast<istd::TraceLevel_e>(errorTrace[1]));
    	}
    }

    if (liberaIpAddr.empty())
    {
      INFO_STREAM << "Using 127.0.0.1 as ip address" << std::endl;
    }

    //set timing board
	std::string tim("boards.evrx2.");

	//	Initialize device
    m_libera = new LiberaClient(this, liberaIpAddr);

    try
    {
    //TODO DDTriggerCoiunter
    m_libera->AddScalar(tim + "events.t2.count",
        attr_DDTriggerCounter_read, LiberaAttr::ULL2LONG);

    m_libera->AddScalar(tim + "pll.vcxo_offset", attr_OffsetTune_read);
    m_libera->AddScalar(tim + "pll.compensate_offset", attr_CompensateTune_read);

    m_libera->AddScalar("application.synchronize_lmt",
    		attr_SynchronizeLMT_read, LiberaAttr::ULONGLONG2LONG, LiberaAttr::LONG2ULONGLONG);
   // m_libera->AddScalar("",attr_SynchronizeLMT_read);

    m_libera->AddScalar(tim + "pll.locked", attr_PLLLock_read);
    m_libera->AddScalar(tim + "clk_mgr.mc.locked", attr_MCLock_read);
    m_libera->AddScalar(tim + "pll.clk_good", attr_PLLClockGood_read);

    //TODO
    //TEST

    //m_libera->AddScalarPM("boards.evrx2.sensors.ID_6.value",
    //    attr_Temp3_read, LiberaAttr::DBL2SHORT);
    //m_libera->AddScalar("",attr_Temp3_read);
    //*attr_Temp3_read = 60;
    //m_libera->AddScalarPM("fans.left_", attr_Fan1Speed_read, LiberaAttr::FAN2SHORT);
    //m_libera->AddScalarPM("fans.right_", attr_Fan2Speed_read, LiberaAttr::FAN2SHORT);

    //n.a.
    m_libera->AddScalar("", attr_UserData_read);
    m_libera->AddLogsRead(attr_logs_read, 2048);


    //Timing Settings
    m_libera->AddScalar(tim + "rtc.ts_timestamp",
    		attr_RTCTimestamp_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar(tim + "rtc.ts_timestamp.state", attr_RTCTimestampState_read);

    //MC-CONFIG
    m_libera->AddScalar(tim + "rtc.decoder_switch", attr_RtcDecoderSwitch_read);
    m_libera->AddScalar(tim + "triggers.mc.source",attr_McSource_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(tim + "rtc.mc.in_mask",attr_MCinMask_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC); //TODO
    m_libera->AddScalar(tim + "rtc.mc.in_function",attr_MCinFunction_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC); //TODO

    //T0-CONFIG
    m_libera->AddScalar(tim + "connectors.t0.direction",
    		attr_T0Direction_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(tim + "connectors.t0.out_type",
    		attr_T0OutputType_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t0.duration",
    		attr_T0Duration_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t0.delay",
    		attr_T0Delay_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);
    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t0.state",
    		attr_T0State_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);
    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t0.in_mask",
    		attr_T0inMask_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);
    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t0.in_function",
    		attr_T0idOutput_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);
    m_libera->AddScalar(tim + "rtc.connectors.t0.id", attr_T0IdInput_read,
        		LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    //T1-CONFIG
    m_libera->AddScalar(tim + "triggers.t1.source", attr_T1Source_read);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t1.in_mask",
    		attr_T1inMask_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.t1.in_mask",
    		attr_RtcT1inMask_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.t1.in_function",
    		attr_T1inFunction_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.connectors.t1.id", attr_T1IdInput_read,
    		LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    m_libera->AddScalar(tim + "connectors.t1.direction",
    		attr_T1Direction_read,LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);

    m_libera->AddScalar(tim + "rtc.connectors.t1.edge.falling", attr_T1EdgeFalling_read);

    m_libera->AddScalar(tim + "rtc.connectors.t1.edge.rising", attr_T1EdgeRising_read);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t1.state",
    		attr_T1State_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t1.duration",
    		attr_T1Duration_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t1.in_function",
    		attr_T1idOutput_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    //T2-CONFIG
    m_libera->AddScalar(tim + "triggers.t2.source", attr_T2Source_read);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t2.in_mask",
    		attr_T2inMask_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.t2.in_mask",
    		attr_RtcT2inMask_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.t2.in_function",
    		attr_T2inFunction_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.connectors.t2.id", attr_T2IdInput_read,
    		LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    m_libera->AddScalar(tim + "connectors.t2.direction", attr_T2Direction_read,
    		LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);

    m_libera->AddScalar(tim + "rtc.connectors.t2.edge.falling", attr_T2EdgeFalling_read);

    m_libera->AddScalar(tim + "rtc.connectors.t2.edge.rising", attr_T2EdgeRising_read);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t2.state",
    		attr_T2State_read, LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t2.in_function",
    		attr_T2idOutput_read, LiberaAttr::SPEC2LONG,LiberaAttr::LONG2SPEC);

    m_libera->AddScalar(tim + "rtc.sfp_2_connectors.t2.duration",
    		attr_T2Duration_read, LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    //ILK-CONFIG
    m_libera->AddScalar(tim + "rtc.mgt_out", attr_MgtOut_read,
    		LiberaAttr::USHORT2SHORT, LiberaAttr::SHORT2USHORT); //TODO

    m_libera->AddScalar(tim + "rtc.sfp_tx.interlock.id", attr_InterlockID_read,
    		LiberaAttr::ULONG2LONG, LiberaAttr::LONG2ULONG);

    //POST MORTEM
    m_libera->AddScalar(tim + "events.t1.count",
        attr_PMNotificationCounter_read, LiberaAttr::ULL2SHORT);
    }
    catch (...)
    {
    	m_state = Tango::FAULT;
    	//m_state = Tango::UNKNOWN;
    	return;
    }

    try
    {

      m_libera->Connect();
      m_state = Tango::ON;
      m_status = "Connected to Libera";


      //Initiliaze Libera Setting-Attributes
      init_settings();

    }
    catch (...)
    {
      m_state = Tango::UNKNOWN;
      m_status = "Connection to Libera failed. Try to reinit the device.";
    }


	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::init_device
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void LiberaEventReceiver::get_device_property()
{
	/*----- PROTECTED REGION ID(LiberaEventReceiver::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
    DEBUG_STREAM << "LiberaEventReceiver::get_device_property() get device properties " << device_name << endl;

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("LiberaIpAddr"));
	dev_prop.push_back(Tango::DbDatum("LiberaPort"));
	dev_prop.push_back(Tango::DbDatum("LiberaMulticastIpAddr"));
	dev_prop.push_back(Tango::DbDatum("Location"));
	dev_prop.push_back(Tango::DbDatum("Institute"));
	dev_prop.push_back(Tango::DbDatum("MCDecoderSwitch"));
	dev_prop.push_back(Tango::DbDatum("MCSource"));
	dev_prop.push_back(Tango::DbDatum("T0Direction"));
	dev_prop.push_back(Tango::DbDatum("T0OutType"));
	dev_prop.push_back(Tango::DbDatum("T0State"));
	dev_prop.push_back(Tango::DbDatum("T1Source"));
	dev_prop.push_back(Tango::DbDatum("T2Source"));
	dev_prop.push_back(Tango::DbDatum("MgtOut"));
	dev_prop.push_back(Tango::DbDatum("MCinMask"));
	dev_prop.push_back(Tango::DbDatum("MCinFunction"));
	dev_prop.push_back(Tango::DbDatum("T0inMask"));
	dev_prop.push_back(Tango::DbDatum("T1inMask"));
	dev_prop.push_back(Tango::DbDatum("T2inMask"));
	dev_prop.push_back(Tango::DbDatum("T0idOutput"));
	dev_prop.push_back(Tango::DbDatum("T1inFunction"));
	dev_prop.push_back(Tango::DbDatum("T2inFunction"));
	dev_prop.push_back(Tango::DbDatum("T0Duration"));
	dev_prop.push_back(Tango::DbDatum("T0Delay"));
	dev_prop.push_back(Tango::DbDatum("InterlockId"));
	dev_prop.push_back(Tango::DbDatum("T1EdgeFalling"));
	dev_prop.push_back(Tango::DbDatum("T2EdgeFalling"));
	dev_prop.push_back(Tango::DbDatum("T1EdgeRising"));
	dev_prop.push_back(Tango::DbDatum("T2EdgeRising"));
	dev_prop.push_back(Tango::DbDatum("T1Direction"));
	dev_prop.push_back(Tango::DbDatum("T2Direction"));
	dev_prop.push_back(Tango::DbDatum("T1IdInput"));
	dev_prop.push_back(Tango::DbDatum("T2IdInput"));
	dev_prop.push_back(Tango::DbDatum("ErrorTrace"));
	dev_prop.push_back(Tango::DbDatum("T2State"));
	dev_prop.push_back(Tango::DbDatum("T1State"));
	dev_prop.push_back(Tango::DbDatum("T1Duration"));
	dev_prop.push_back(Tango::DbDatum("T1idOutput"));
	dev_prop.push_back(Tango::DbDatum("T2idOutput"));
	dev_prop.push_back(Tango::DbDatum("T2Duration"));
	dev_prop.push_back(Tango::DbDatum("RtcT1inMask"));
	dev_prop.push_back(Tango::DbDatum("RtcT2inMask"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on LiberaEventReceiverClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		LiberaEventReceiverClass	*ds_class =
			(static_cast<LiberaEventReceiverClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize LiberaIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaIpAddr;
		else {
			//	Try to initialize LiberaIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaIpAddr;
		}
		//	And try to extract LiberaIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaIpAddr;

		//	Try to initialize LiberaPort from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaPort;
		else {
			//	Try to initialize LiberaPort from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaPort;
		}
		//	And try to extract LiberaPort value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaPort;

		//	Try to initialize LiberaMulticastIpAddr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  liberaMulticastIpAddr;
		else {
			//	Try to initialize LiberaMulticastIpAddr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  liberaMulticastIpAddr;
		}
		//	And try to extract LiberaMulticastIpAddr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  liberaMulticastIpAddr;

		//	Try to initialize Location from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  location;
		else {
			//	Try to initialize Location from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  location;
		}
		//	And try to extract Location value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  location;

		//	Try to initialize Institute from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  institute;
		else {
			//	Try to initialize Institute from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  institute;
		}
		//	And try to extract Institute value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  institute;

		//	Try to initialize MCDecoderSwitch from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mCDecoderSwitch;
		else {
			//	Try to initialize MCDecoderSwitch from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mCDecoderSwitch;
		}
		//	And try to extract MCDecoderSwitch value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mCDecoderSwitch;

		//	Try to initialize MCSource from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mCSource;
		else {
			//	Try to initialize MCSource from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mCSource;
		}
		//	And try to extract MCSource value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mCSource;

		//	Try to initialize T0Direction from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0Direction;
		else {
			//	Try to initialize T0Direction from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0Direction;
		}
		//	And try to extract T0Direction value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0Direction;

		//	Try to initialize T0OutType from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0OutType;
		else {
			//	Try to initialize T0OutType from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0OutType;
		}
		//	And try to extract T0OutType value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0OutType;

		//	Try to initialize T0State from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0State;
		else {
			//	Try to initialize T0State from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0State;
		}
		//	And try to extract T0State value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0State;

		//	Try to initialize T1Source from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1Source;
		else {
			//	Try to initialize T1Source from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1Source;
		}
		//	And try to extract T1Source value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1Source;

		//	Try to initialize T2Source from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2Source;
		else {
			//	Try to initialize T2Source from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2Source;
		}
		//	And try to extract T2Source value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2Source;

		//	Try to initialize MgtOut from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mgtOut;
		else {
			//	Try to initialize MgtOut from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mgtOut;
		}
		//	And try to extract MgtOut value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mgtOut;

		//	Try to initialize MCinMask from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mCinMask;
		else {
			//	Try to initialize MCinMask from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mCinMask;
		}
		//	And try to extract MCinMask value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mCinMask;

		//	Try to initialize MCinFunction from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  mCinFunction;
		else {
			//	Try to initialize MCinFunction from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  mCinFunction;
		}
		//	And try to extract MCinFunction value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mCinFunction;

		//	Try to initialize T0inMask from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0inMask;
		else {
			//	Try to initialize T0inMask from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0inMask;
		}
		//	And try to extract T0inMask value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0inMask;

		//	Try to initialize T1inMask from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1inMask;
		else {
			//	Try to initialize T1inMask from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1inMask;
		}
		//	And try to extract T1inMask value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1inMask;

		//	Try to initialize T2inMask from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2inMask;
		else {
			//	Try to initialize T2inMask from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2inMask;
		}
		//	And try to extract T2inMask value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2inMask;

		//	Try to initialize T0idOutput from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0idOutput;
		else {
			//	Try to initialize T0idOutput from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0idOutput;
		}
		//	And try to extract T0idOutput value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0idOutput;

		//	Try to initialize T1inFunction from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1inFunction;
		else {
			//	Try to initialize T1inFunction from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1inFunction;
		}
		//	And try to extract T1inFunction value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1inFunction;

		//	Try to initialize T2inFunction from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2inFunction;
		else {
			//	Try to initialize T2inFunction from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2inFunction;
		}
		//	And try to extract T2inFunction value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2inFunction;

		//	Try to initialize T0Duration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0Duration;
		else {
			//	Try to initialize T0Duration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0Duration;
		}
		//	And try to extract T0Duration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0Duration;

		//	Try to initialize T0Delay from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t0Delay;
		else {
			//	Try to initialize T0Delay from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t0Delay;
		}
		//	And try to extract T0Delay value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t0Delay;

		//	Try to initialize InterlockId from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  interlockId;
		else {
			//	Try to initialize InterlockId from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  interlockId;
		}
		//	And try to extract InterlockId value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  interlockId;

		//	Try to initialize T1EdgeFalling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1EdgeFalling;
		else {
			//	Try to initialize T1EdgeFalling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1EdgeFalling;
		}
		//	And try to extract T1EdgeFalling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1EdgeFalling;

		//	Try to initialize T2EdgeFalling from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2EdgeFalling;
		else {
			//	Try to initialize T2EdgeFalling from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2EdgeFalling;
		}
		//	And try to extract T2EdgeFalling value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2EdgeFalling;

		//	Try to initialize T1EdgeRising from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1EdgeRising;
		else {
			//	Try to initialize T1EdgeRising from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1EdgeRising;
		}
		//	And try to extract T1EdgeRising value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1EdgeRising;

		//	Try to initialize T2EdgeRising from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2EdgeRising;
		else {
			//	Try to initialize T2EdgeRising from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2EdgeRising;
		}
		//	And try to extract T2EdgeRising value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2EdgeRising;

		//	Try to initialize T1Direction from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1Direction;
		else {
			//	Try to initialize T1Direction from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1Direction;
		}
		//	And try to extract T1Direction value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1Direction;

		//	Try to initialize T2Direction from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2Direction;
		else {
			//	Try to initialize T2Direction from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2Direction;
		}
		//	And try to extract T2Direction value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2Direction;

		//	Try to initialize T1IdInput from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1IdInput;
		else {
			//	Try to initialize T1IdInput from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1IdInput;
		}
		//	And try to extract T1IdInput value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1IdInput;

		//	Try to initialize T2IdInput from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2IdInput;
		else {
			//	Try to initialize T2IdInput from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2IdInput;
		}
		//	And try to extract T2IdInput value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2IdInput;

		//	Try to initialize ErrorTrace from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  errorTrace;
		else {
			//	Try to initialize ErrorTrace from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  errorTrace;
		}
		//	And try to extract ErrorTrace value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  errorTrace;

		//	Try to initialize T2State from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2State;
		else {
			//	Try to initialize T2State from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2State;
		}
		//	And try to extract T2State value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2State;

		//	Try to initialize T1State from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1State;
		else {
			//	Try to initialize T1State from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1State;
		}
		//	And try to extract T1State value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1State;

		//	Try to initialize T1Duration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1Duration;
		else {
			//	Try to initialize T1Duration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1Duration;
		}
		//	And try to extract T1Duration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1Duration;

		//	Try to initialize T1idOutput from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t1idOutput;
		else {
			//	Try to initialize T1idOutput from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t1idOutput;
		}
		//	And try to extract T1idOutput value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t1idOutput;

		//	Try to initialize T2idOutput from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2idOutput;
		else {
			//	Try to initialize T2idOutput from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2idOutput;
		}
		//	And try to extract T2idOutput value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2idOutput;

		//	Try to initialize T2Duration from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  t2Duration;
		else {
			//	Try to initialize T2Duration from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  t2Duration;
		}
		//	And try to extract T2Duration value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  t2Duration;

		//	Try to initialize RtcT1inMask from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rtcT1inMask;
		else {
			//	Try to initialize RtcT1inMask from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rtcT1inMask;
		}
		//	And try to extract RtcT1inMask value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rtcT1inMask;

		//	Try to initialize RtcT2inMask from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rtcT2inMask;
		else {
			//	Try to initialize RtcT2inMask from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rtcT2inMask;
		}
		//	And try to extract RtcT2inMask value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rtcT2inMask;

	}

	/*----- PROTECTED REGION ID(LiberaEventReceiver::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void LiberaEventReceiver::always_executed_hook()
{
	DEBUG_STREAM << "LiberaEventReceiver::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::always_executed_hook) ENABLED START -----*/


	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaEventReceiver::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "LiberaEventReceiver::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute PMNotificationCounter related method
 *	Description: Number a PM event recieved since last Init
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_PMNotificationCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_PMNotificationCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_PMNotificationCounter) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_PMNotificationCounter_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_PMNotificationCounter
}
//--------------------------------------------------------
/**
 *	Read attribute OffsetTune related method
 *	Description: Sets the offset tune value, 1 unit is approximately 40 Hz. 
 *               Default value is 0 (precisely tuned).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_OffsetTune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_OffsetTune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_OffsetTune) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_OffsetTune_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_OffsetTune
}
//--------------------------------------------------------
/**
 *	Write attribute OffsetTune related method
 *	Description: Sets the offset tune value, 1 unit is approximately 40 Hz. 
 *               Default value is 0 (precisely tuned).
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_OffsetTune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_OffsetTune(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_OffsetTune) ENABLED START -----*/

	m_libera->UpdateScalar(attr_OffsetTune_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_OffsetTune
}
//--------------------------------------------------------
/**
 *	Read attribute CompensateTune related method
 *	Description: To enable double offset-tune, issue the following command 
 *               (to disable it, just use false instead of true).
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_CompensateTune(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_CompensateTune(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_CompensateTune) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_CompensateTune_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_CompensateTune
}
//--------------------------------------------------------
/**
 *	Write attribute CompensateTune related method
 *	Description: To enable double offset-tune, issue the following command 
 *               (to disable it, just use false instead of true).
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_CompensateTune(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_CompensateTune(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_CompensateTune) ENABLED START -----*/

	m_libera->UpdateScalar(attr_CompensateTune_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_CompensateTune
}
//--------------------------------------------------------
/**
 *	Read attribute PLLLock related method
 *	Description: boards.evrx2.pll.locked
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_PLLLock(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_PLLLock(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_PLLLock) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_PLLLock_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_PLLLock
}
//--------------------------------------------------------
/**
 *	Read attribute T0Delay related method
 *	Description: Delay before transmission starts, set in cycles at fSFP
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0Delay(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0Delay(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0Delay) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0Delay_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0Delay
}
//--------------------------------------------------------
/**
 *	Write attribute T0Delay related method
 *	Description: Delay before transmission starts, set in cycles at fSFP
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0Delay(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0Delay(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0Delay) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T0Delay_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0Delay
}
//--------------------------------------------------------
/**
 *	Read attribute RtcDecoderSwitch related method
 *	Description: RTC decoding switch of optical stream
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_RtcDecoderSwitch(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_RtcDecoderSwitch(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_RtcDecoderSwitch) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RtcDecoderSwitch_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_RtcDecoderSwitch
}
//--------------------------------------------------------
/**
 *	Write attribute RtcDecoderSwitch related method
 *	Description: RTC decoding switch of optical stream
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_RtcDecoderSwitch(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_RtcDecoderSwitch(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_RtcDecoderSwitch) ENABLED START -----*/
	//m_libera->UpdateScalar(attr_RtcDecoderSwitch_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_RtcDecoderSwitch
}
//--------------------------------------------------------
/**
 *	Read attribute McSource related method
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_McSource(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_McSource(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_McSource) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_McSource_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_McSource
}
//--------------------------------------------------------
/**
 *	Write attribute McSource related method
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_McSource(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_McSource(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_McSource) ENABLED START -----*/
	m_libera->UpdateScalar(attr_McSource_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_McSource
}
//--------------------------------------------------------
/**
 *	Read attribute T0Direction related method
 *	Description: t0 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0Direction(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0Direction(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0Direction) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0Direction_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0Direction
}
//--------------------------------------------------------
/**
 *	Write attribute T0Direction related method
 *	Description: t0 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0Direction(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0Direction(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0Direction) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T0Direction_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0Direction
}
//--------------------------------------------------------
/**
 *	Read attribute T0OutputType related method
 *	Description: t0 output type
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0OutputType(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0OutputType(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0OutputType) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0OutputType_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0OutputType
}
//--------------------------------------------------------
/**
 *	Write attribute T0OutputType related method
 *	Description: t0 output type
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0OutputType(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0OutputType(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0OutputType) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T0OutputType_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0OutputType
}
//--------------------------------------------------------
/**
 *	Read attribute T0State related method
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0State(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0State(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0State) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0State_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0State
}
//--------------------------------------------------------
/**
 *	Write attribute T0State related method
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0State(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0State(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0State) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T0State_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0State
}
//--------------------------------------------------------
/**
 *	Read attribute T1Source related method
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1Source(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1Source(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1Source) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1Source_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1Source
}
//--------------------------------------------------------
/**
 *	Write attribute T1Source related method
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1Source(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1Source(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1Source) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1Source
}
//--------------------------------------------------------
/**
 *	Read attribute T2Source related method
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2Source(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2Source(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2Source) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2Source_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2Source
}
//--------------------------------------------------------
/**
 *	Write attribute T2Source related method
 *	Description: Trigger line source selection
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2Source(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2Source(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2Source) ENABLED START -----*/
	//m_libera->UpdateScalar(attr_T2Source_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2Source
}
//--------------------------------------------------------
/**
 *	Read attribute MgtOut related method
 *	Description: MGT OUT selection off,sfp_in,debug,connectors
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_MgtOut(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_MgtOut(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_MgtOut) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_MgtOut_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_MgtOut
}
//--------------------------------------------------------
/**
 *	Write attribute MgtOut related method
 *	Description: MGT OUT selection off,sfp_in,debug,connectors
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_MgtOut(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_MgtOut(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_MgtOut) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_MgtOut
}
//--------------------------------------------------------
/**
 *	Read attribute T0inMask related method
 *	Description: T0 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0inMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0inMask(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0inMask) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0inMask_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0inMask
}
//--------------------------------------------------------
/**
 *	Write attribute T0inMask related method
 *	Description: T0 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0inMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0inMask(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0inMask) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T0inMask_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0inMask
}
//--------------------------------------------------------
/**
 *	Read attribute T1inMask related method
 *	Description: T1 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1inMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1inMask(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1inMask) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1inMask_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1inMask
}
//--------------------------------------------------------
/**
 *	Write attribute T1inMask related method
 *	Description: T1 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1inMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1inMask(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1inMask) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T1inMask_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1inMask
}
//--------------------------------------------------------
/**
 *	Read attribute T2inMask related method
 *	Description: T2 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2inMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2inMask(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2inMask) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2inMask_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2inMask
}
//--------------------------------------------------------
/**
 *	Write attribute T2inMask related method
 *	Description: T2 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2inMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2inMask(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2inMask) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T2inMask_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2inMask
}
//--------------------------------------------------------
/**
 *	Read attribute T0idOutput related method
 *	Description: T0 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0idOutput(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0idOutput(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0idOutput) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0idOutput_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0idOutput
}
//--------------------------------------------------------
/**
 *	Write attribute T0idOutput related method
 *	Description: T0 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0idOutput(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0idOutput(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0idOutput) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T0idOutput_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0idOutput
}
//--------------------------------------------------------
/**
 *	Read attribute T1inFunction related method
 *	Description: T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1inFunction(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1inFunction(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1inFunction) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1inFunction_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1inFunction
}
//--------------------------------------------------------
/**
 *	Write attribute T1inFunction related method
 *	Description: T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1inFunction(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1inFunction(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1inFunction) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T1inFunction_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1inFunction
}
//--------------------------------------------------------
/**
 *	Read attribute T2inFunction related method
 *	Description: T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2inFunction(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2inFunction(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2inFunction) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2inFunction_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2inFunction
}
//--------------------------------------------------------
/**
 *	Write attribute T2inFunction related method
 *	Description: T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2inFunction(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2inFunction(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2inFunction) ENABLED START -----*/
        //m_libera->UpdateScalar(attr_T2inFunction_read, t2inFunction);
        m_libera->UpdateScalar(attr_T2inFunction_read, w_val);
        //std::vector<uint32_t> value = std::vector<uint32_t>();
        //value.push_back(109);
        //m_libera->m_root.GetNode(mci::Tokenize("boards."+c_timingBoard+".rtc.t2.in_function")).SetValue(value);
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2inFunction
}
//--------------------------------------------------------
/**
 *	Read attribute MCinMask related method
 *	Description: MC Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_MCinMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_MCinMask(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_MCinMask) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_MCinMask_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_MCinMask
}
//--------------------------------------------------------
/**
 *	Write attribute MCinMask related method
 *	Description: MC Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_MCinMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_MCinMask(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_MCinMask) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_MCinMask
}
//--------------------------------------------------------
/**
 *	Read attribute MCinFunction related method
 *	Description: MC Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_MCinFunction(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_MCinFunction(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_MCinFunction) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_MCinFunction_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_MCinFunction
}
//--------------------------------------------------------
/**
 *	Write attribute MCinFunction related method
 *	Description: MC Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_MCinFunction(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_MCinFunction(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_MCinFunction) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_MCinFunction
}
//--------------------------------------------------------
/**
 *	Read attribute T0Duration related method
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0Duration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0Duration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0Duration) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0Duration_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0Duration
}
//--------------------------------------------------------
/**
 *	Write attribute T0Duration related method
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0Duration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0Duration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0Duration) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T0Duration_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0Duration
}
//--------------------------------------------------------
/**
 *	Read attribute InterlockID related method
 *	Description: Oversaturation or X-Y orbit threshold
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_InterlockID(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_InterlockID(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_InterlockID) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_InterlockID_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_InterlockID
}
//--------------------------------------------------------
/**
 *	Write attribute InterlockID related method
 *	Description: Oversaturation or X-Y orbit threshold
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_InterlockID(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_InterlockID(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_InterlockID) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_InterlockID
}
//--------------------------------------------------------
/**
 *	Read attribute T2EdgeFalling related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2EdgeFalling(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2EdgeFalling(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2EdgeFalling) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2EdgeFalling_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2EdgeFalling
}
//--------------------------------------------------------
/**
 *	Write attribute T2EdgeFalling related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2EdgeFalling(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2EdgeFalling(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2EdgeFalling) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2EdgeFalling
}
//--------------------------------------------------------
/**
 *	Read attribute T2EdgeRising related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2EdgeRising(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2EdgeRising(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2EdgeRising) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2EdgeRising_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2EdgeRising
}
//--------------------------------------------------------
/**
 *	Write attribute T2EdgeRising related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2EdgeRising(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2EdgeRising(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2EdgeRising) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2EdgeRising
}
//--------------------------------------------------------
/**
 *	Read attribute T1EdgeFalling related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1EdgeFalling(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1EdgeFalling(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1EdgeFalling) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1EdgeFalling_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1EdgeFalling
}
//--------------------------------------------------------
/**
 *	Write attribute T1EdgeFalling related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1EdgeFalling(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1EdgeFalling(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1EdgeFalling) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1EdgeFalling
}
//--------------------------------------------------------
/**
 *	Read attribute T1EdgeRising related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1EdgeRising(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1EdgeRising(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1EdgeRising) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1EdgeRising_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1EdgeRising
}
//--------------------------------------------------------
/**
 *	Write attribute T1EdgeRising related method
 *	Description: 
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1EdgeRising(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1EdgeRising(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevBoolean	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1EdgeRising) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1EdgeRising
}
//--------------------------------------------------------
/**
 *	Read attribute T2IdInput related method
 *	Description: T2 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2IdInput(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2IdInput(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2IdInput) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2IdInput_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2IdInput
}
//--------------------------------------------------------
/**
 *	Write attribute T2IdInput related method
 *	Description: T2 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2IdInput(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2IdInput(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2IdInput) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2IdInput
}
//--------------------------------------------------------
/**
 *	Read attribute T1IdInput related method
 *	Description: T1 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1IdInput(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1IdInput(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1IdInput) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1IdInput_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1IdInput
}
//--------------------------------------------------------
/**
 *	Write attribute T1IdInput related method
 *	Description: T1 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1IdInput(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1IdInput(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1IdInput) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1IdInput
}
//--------------------------------------------------------
/**
 *	Read attribute T1Direction related method
 *	Description: t2 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1Direction(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1Direction(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1Direction) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1Direction_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1Direction
}
//--------------------------------------------------------
/**
 *	Write attribute T1Direction related method
 *	Description: t2 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1Direction(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1Direction(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1Direction) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1Direction
}
//--------------------------------------------------------
/**
 *	Read attribute T2Direction related method
 *	Description: t2 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2Direction(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2Direction(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2Direction) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2Direction_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2Direction
}
//--------------------------------------------------------
/**
 *	Write attribute T2Direction related method
 *	Description: t2 port direction
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2Direction(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2Direction(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2Direction) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2Direction
}
//--------------------------------------------------------
/**
 *	Read attribute SynchronizeLMT related method
 *	Description: The absolute time synchronization is done for all processor modules simultaneously.  [0, 18446744073709551614]
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_SynchronizeLMT(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_SynchronizeLMT(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_SynchronizeLMT) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_SynchronizeLMT_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_SynchronizeLMT
}
//--------------------------------------------------------
/**
 *	Write attribute SynchronizeLMT related method
 *	Description: The absolute time synchronization is done for all processor modules simultaneously.  [0, 18446744073709551614]
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_SynchronizeLMT(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_SynchronizeLMT(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_SynchronizeLMT) ENABLED START -----*/
	m_libera->UpdateScalar(attr_SynchronizeLMT_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_SynchronizeLMT
}
//--------------------------------------------------------
/**
 *	Read attribute RTCTimestamp related method
 *	Description: Timestamp which is be taken by receiving optical events over SFP when reception is enabled
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_RTCTimestamp(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_RTCTimestamp(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_RTCTimestamp) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RTCTimestamp_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_RTCTimestamp
}
//--------------------------------------------------------
/**
 *	Read attribute RTCTimestampState related method
 *	Description: State of the timestamp which is be taken by receiving optical events over SFP when reception is enabled
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_RTCTimestampState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_RTCTimestampState(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_RTCTimestampState) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RTCTimestampState_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_RTCTimestampState
}
//--------------------------------------------------------
/**
 *	Read attribute T1State related method
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1State(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1State(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1State) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1State_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1State
}
//--------------------------------------------------------
/**
 *	Write attribute T1State related method
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1State(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1State(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1State) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T1State_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1State
}
//--------------------------------------------------------
/**
 *	Read attribute T2State related method
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2State(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2State(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2State) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2State_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2State
}
//--------------------------------------------------------
/**
 *	Write attribute T2State related method
 *	Description: state of active signal: high (logical 1) or low (logical 0)
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2State(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2State(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2State) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T2State_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2State
}
//--------------------------------------------------------
/**
 *	Read attribute T1Duration related method
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1Duration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1Duration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1Duration) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1Duration_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1Duration
}
//--------------------------------------------------------
/**
 *	Write attribute T1Duration related method
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1Duration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1Duration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1Duration) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T1Duration_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1Duration
}
//--------------------------------------------------------
/**
 *	Read attribute T1idOutput related method
 *	Description: T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T1idOutput(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T1idOutput(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T1idOutput) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T1idOutput_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T1idOutput
}
//--------------------------------------------------------
/**
 *	Write attribute T1idOutput related method
 *	Description: T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T1idOutput(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T1idOutput(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T1idOutput) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T1idOutput_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T1idOutput
}
//--------------------------------------------------------
/**
 *	Read attribute T2idOutput related method
 *	Description: T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2idOutput(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2idOutput(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2idOutput) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2idOutput_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2idOutput
}
//--------------------------------------------------------
/**
 *	Write attribute T2idOutput related method
 *	Description: T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2idOutput(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2idOutput(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2idOutput) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_T2idOutput_read, w_val);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2idOutput
}
//--------------------------------------------------------
/**
 *	Read attribute T0IdInput related method
 *	Description: T0 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T0IdInput(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T0IdInput(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T0IdInput) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T0IdInput_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T0IdInput
}
//--------------------------------------------------------
/**
 *	Write attribute T0IdInput related method
 *	Description: T0 Optical event ID
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T0IdInput(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T0IdInput(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T0IdInput) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T0IdInput_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T0IdInput
}
//--------------------------------------------------------
/**
 *	Read attribute T2Duration related method
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_T2Duration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_T2Duration(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_T2Duration) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_T2Duration_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_T2Duration
}
//--------------------------------------------------------
/**
 *	Write attribute T2Duration related method
 *	Description: Duration of signal active pulse
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_T2Duration(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_T2Duration(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_T2Duration) ENABLED START -----*/
	m_libera->UpdateScalar(attr_T2Duration_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_T2Duration
}
//--------------------------------------------------------
/**
 *	Read attribute RtcT1inMask related method
 *	Description: evrx2.rtc.t1.in_mask
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_RtcT1inMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_RtcT1inMask(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_RtcT1inMask) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RtcT1inMask_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_RtcT1inMask
}
//--------------------------------------------------------
/**
 *	Write attribute RtcT1inMask related method
 *	Description: evrx2.rtc.t1.in_mask
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_RtcT1inMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_RtcT1inMask(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_RtcT1inMask) ENABLED START -----*/
	
	m_libera->UpdateScalar(attr_RtcT1inMask_read, w_val);

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_RtcT1inMask
}
//--------------------------------------------------------
/**
 *	Read attribute RtcT2inMask related method
 *	Description: evrx2.rtc.t2.in_mask
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_RtcT2inMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_RtcT2inMask(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_RtcT2inMask) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_RtcT2inMask_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_RtcT2inMask
}
//--------------------------------------------------------
/**
 *	Write attribute RtcT2inMask related method
 *	Description: evrx2.rtc.t2.in_mask
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::write_RtcT2inMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::write_RtcT2inMask(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevLong	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(LiberaEventReceiver::write_RtcT2inMask) ENABLED START -----*/
	m_libera->UpdateScalar(attr_RtcT2inMask_read, w_val);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::write_RtcT2inMask
}
//--------------------------------------------------------
/**
 *	Read attribute DDTriggerCounter related method
 *	Description: Number of trigger notifications received since last device <init>
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_DDTriggerCounter(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_DDTriggerCounter(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_DDTriggerCounter) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_DDTriggerCounter_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_DDTriggerCounter
}
//--------------------------------------------------------
/**
 *	Read attribute MCLock related method
 *	Description: boards.evrx2.pll.locked
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_MCLock(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_MCLock(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_MCLock) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_MCLock_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_MCLock
}
//--------------------------------------------------------
/**
 *	Read attribute PLLClockGood related method
 *	Description: boards.evrx2.clk_mgr.mc.locked
 *
 *	Data type:	Tango::DevBoolean
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_PLLClockGood(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_PLLClockGood(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_PLLClockGood) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_PLLClockGood_read);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_PLLClockGood
}
//--------------------------------------------------------
/**
 *	Read attribute UserData related method
 *	Description: User defined data
 *
 *	Data type:	Tango::DevShort
 *	Attr type:	Spectrum max = 256
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_UserData(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_UserData(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_UserData) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_UserData_read, 256);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_UserData
}
//--------------------------------------------------------
/**
 *	Read attribute logs related method
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Spectrum max = 2048
 */
//--------------------------------------------------------
void LiberaEventReceiver::read_logs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "LiberaEventReceiver::read_logs(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::read_logs) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_logs_read, 2048);
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::read_logs
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void LiberaEventReceiver::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(LiberaEventReceiver::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command State related method
 *	Description: This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 *	@returns State Code
 */
//--------------------------------------------------------
Tango::DevState LiberaEventReceiver::dev_state()
{
	DEBUG_STREAM << "LiberaEventReceiver::State()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::dev_state) ENABLED START -----*/
	Tango::DevState argout = m_state;
	//TODO cleanup
	//Save the current status before change.
	current_status=m_status;

	//if (argout == Tango::FAULT) {
	if (m_libera->m_errorFlag) {
		//m_status is set from Set lib error method.
		argout = Tango::FAULT;
		m_status = m_libera->m_errorStatus;
		LogStatusGuard(m_status);
	}
	else if (*attr_PLLLock_read == false || *attr_RTCTimestampState_read != 1 || *attr_MCLock_read == false || *attr_PLLClockGood_read == false )
	{
		argout = Tango::ALARM;
		m_status = set_timing_status();

	}
	else {
		argout = Tango::ON;
		m_status = "Connected to Libera";
	}


	//Set to Tango in order to use it for the LogStatusGuard (Doing it also below because Pogo generaters it)
	m_state = argout;
	set_state(argout);    // Give the state to Tango.

	//Call to set any new status message
	dev_status();

	//Care to not send any repetitive Log messages to the ES Cluster (its because we use polling to dev_state() method.)
	LogStatusGuard(m_status);
	//dev_status();

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::dev_state
	set_state(argout);    // Give the state to Tango.
	if (argout!=Tango::ALARM)
		DeviceImpl::dev_state();
	return get_state();  // Return it after Tango management.
}
//--------------------------------------------------------
/**
 *	Command Status related method
 *	Description: This command gets the device status (stored in its <i>device_status</i> data member) and returns it to the caller.
 *
 *	@returns Status description
 */
//--------------------------------------------------------
Tango::ConstDevString LiberaEventReceiver::dev_status()
{
	DEBUG_STREAM << "LiberaEventReceiver::Status()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::dev_status) ENABLED START -----*/
	//	Add your own code
	//TODO cleanup
	//Check for status change and push it to the logs.
	//LogStatusGuard(m_status);
	//current_status=m_status;

	//ugly but for Pogo reasons
	std::string status = m_status;
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::dev_status
	set_status(status);               // Give the status to Tango.
	return DeviceImpl::dev_status();  // Return it.
}
//--------------------------------------------------------
/**
 *	Command GetParameters related method
 *	Description: Retruns the current gains and offsets (i.e. the parameters used for position computation)
 *
 *	@returns The BPM gain and offsets
 */
//--------------------------------------------------------
Tango::DevVarDoubleStringArray *LiberaEventReceiver::get_parameters()
{
	Tango::DevVarDoubleStringArray *argout;
	DEBUG_STREAM << "LiberaEventReceiver::GetParameters()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::get_parameters) ENABLED START -----*/
	
	//	Add your own code
    argout = new Tango::DevVarDoubleStringArray();
    argout->dvalue.length(0);
    argout->svalue.length(0);

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::get_parameters
	return argout;
}
//--------------------------------------------------------
/**
 *	Command ReloadSystemProperties related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void LiberaEventReceiver::reload_system_properties()
{
	DEBUG_STREAM << "LiberaEventReceiver::ReloadSystemProperties()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::reload_system_properties) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::reload_system_properties
}
//--------------------------------------------------------
/**
 *	Command MagicCommand related method
 *	Description: Directly dump the Libera ireg node structure. If the input argument is a sub tree all subnodes will be dumped out.
 *
 *	@param argin absolute path of the node name
 *	@returns value of specified node(s)
 */
//--------------------------------------------------------
Tango::DevVarStringArray *LiberaEventReceiver::magic_command(Tango::DevString argin)
{
	Tango::DevVarStringArray *argout;
	DEBUG_STREAM << "LiberaEventReceiver::MagicCommand()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::magic_command) ENABLED START -----*/
	
	//	Add your own code

    argout = new Tango::DevVarStringArray(1);
    argout->length(1);

    if (!m_libera->MagicCommand(argin, argout)) {
        INFO_STREAM << "magic_command() faled!" << endl;
    }

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::magic_command
	return argout;
}
//--------------------------------------------------------
/**
 *	Command AnnounceSynchronization related method
 *	Description: Announce synchronization procedure:
 *               * Stop the Trigger (t2source=off)
 *               *  MC PLL (MUST be locked)
 *               * Synchronization State Machine (MUST be Tracking)
 *
 */
//--------------------------------------------------------
void LiberaEventReceiver::announce_synchronization()
{
	DEBUG_STREAM << "LiberaEventReceiver::AnnounceSynchronization()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::announce_synchronization) ENABLED START -----*/
	if(*attr_PLLLock_read) {
		m_libera->UpdateScalar(attr_T2inFunction_read, (long)109);
                //delete sync_id;
		//Announce Synchronization
		m_libera->UpdateScalar(attr_SynchronizeLMT_read, (long)0);
	}
	else {
		ERROR_STREAM << "MC Pll is not locked! Cant Announce Synchronizations." << endl;
	}
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::announce_synchronization
}
//--------------------------------------------------------
/**
 *	Command ForceInitSettings related method
 *	Description: Initializing Libera Default Settings (Based to the properties) without performing init_device
 *
 */
//--------------------------------------------------------
void LiberaEventReceiver::force_init_settings()
{
	DEBUG_STREAM << "LiberaEventReceiver::ForceInitSettings()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::force_init_settings) ENABLED START -----*/
	//init_settings();

	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::force_init_settings
}
//--------------------------------------------------------
/**
 *	Command SetTraceLevel related method
 *	Description: Sets the Trace Error Level:  	Off     = 0,
 *                       		Low     = 1,
 *               		Med     = 2,
 *               		High    = 3,
 *               		Detail  = 4
 *
 *	@param argin 
 */
//--------------------------------------------------------
void LiberaEventReceiver::set_trace_level(Tango::DevUShort argin)
{
	DEBUG_STREAM << "LiberaEventReceiver::SetTraceLevel()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::set_trace_level) ENABLED START -----*/
	
	//	Add your own code
	istd::TraceSetLevel(static_cast<istd::TraceLevel_e>(argin));
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::set_trace_level
}
//--------------------------------------------------------
/**
 *	Command StartSynchronization related method
 *	Description: Starts synchronization procedure:
 *               * Synchronization State Machine (MUST be Tracking)
 *               * Start the Trigger (t2source=Pulse and then t2source=RTC)
 *               * Synchronization State Machine (MUST be Synchronized)
 *
 */
//--------------------------------------------------------
void LiberaEventReceiver::start_synchronization()
{
	DEBUG_STREAM << "LiberaEventReceiver::StartSynchronization()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(LiberaEventReceiver::start_synchronization) ENABLED START -----*/
	
	//	Add your own code
	m_libera->UpdateScalar(attr_T2inFunction_read, t2inFunction);
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::start_synchronization
}
//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiver::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void LiberaEventReceiver::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(LiberaEventReceiver::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::add_dynamic_commands
}

/*----- PROTECTED REGION ID(LiberaEventReceiver::namespace_ending) ENABLED START -----*/

/*
 *      Log status guard
 */
void LiberaEventReceiver::LogStatusGuard(std::string status)
{
	//TODO cleanup
	//cout << "Before, Status: "<< status <<  ", m_status: " << m_status << ", State: " << m_state << endl;
	//int state;
	//state = get_state();

	if (status.compare(current_status) != 0) {
		//Tango::DevState state = get_state();
		switch(m_state) {

		case 7:
			break;
		case 8:
			ERROR_STREAM << status << endl;
			//cout << "ERROR_STREAM " << m_status << endl;
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			WARN_STREAM << status << endl;
			//cout << "WARN_STREAM " << m_status << endl;
			break;
		default:
			//cout << "Inside default, State changed. " << status << ", " << m_state <<", " << get_state() << endl;
			break;
		}
	}
	//else
		//cout << "State same with before, " << status << ", " << m_state <<", " << get_state() << endl;
}

void LiberaEventReceiver::set_lib_error(std::string nodeinfo)
{
	m_state = Tango::FAULT;
    m_status = "Error while reading from a node:: "+ nodeinfo +". Please reinit the device";
    LiberaEventReceiver::LogStatusGuard(m_status);
    //throw nodeinfo;
}

std::string LiberaEventReceiver::set_timing_status()
{
	std::string status = "Timing Alarm";

	if (*attr_PLLLock_read == false)
		status += " - Pll not locked";

	if (*attr_MCLock_read == false)
		status += " - MC not locked";

	if (*attr_PLLClockGood_read == false)
		status += " - Pll Clock not good";

	if (*attr_RTCTimestampState_read != 1)
		status += " - RTC TimeStamp not done";

	return status;
}

void LiberaEventReceiver::init_settings()
{
	try
	{
    //Update Values from the Properties
    //MC
	//*attr_RtcDecoderSwitch_read = mCDecoderSwitch;
	m_libera->UpdateScalar(attr_RtcDecoderSwitch_read, mCDecoderSwitch);
	m_libera->UpdateScalar(attr_McSource_read, mCSource);
    //*attr_MCinMask_read = mCinMask;
    m_libera->UpdateScalar(attr_MCinMask_read, mCinMask);
    //*attr_MCinFunction_read = mCinFunction;
    m_libera->UpdateScalar(attr_MCinFunction_read, mCinFunction);
    //T0
    //this->attr_T0Direction_read = &t0Direction;
    //*attr_T0Direction_read = t0Direction;
    m_libera->UpdateScalar(attr_T0Direction_read, t0Direction);
    //this->attr_T0OutputType_read = &t0OutType;
    //*attr_T0OutputType_read = t0OutType;
    m_libera->UpdateScalar(attr_T0OutputType_read, t0OutType);
    //this->attr_T0Duration_read = &t0Duration;
    //*attr_T0Duration_read = t0Duration;
    m_libera->UpdateScalar(attr_T0Duration_read, t0Duration);
    //this->attr_T0Delay_read = &t0Delay;
    //*attr_T0Delay_read = t0Delay;
    m_libera->UpdateScalar(attr_T0Delay_read, t0Delay);
    //this->attr_T0State_read = &t0State;
    //*attr_T0State_read = t0State;
    m_libera->UpdateScalar(attr_T0State_read, t0State);
    //this->attr_T0inMask_read = &t0inMask;
    //*attr_T0inMask_read = t0inMask;
    m_libera->UpdateScalar(attr_T0inMask_read, t0inMask);
    //this->attr_T0idOut_readd = &t0inFunction;
    //*attr_T0inFunction_read = t0inFunction;
    m_libera->UpdateScalar(attr_T0idOutput_read, t0idOutput);

//    //T1
    m_libera->UpdateScalar(attr_T1Source_read, t1Source);
    //*attr_T1Source_read = t1Source;
    m_libera->UpdateScalar(attr_T1inMask_read, t1inMask);
    //*attr_T1inMask_read = t1inMask;
    m_libera->UpdateScalar(attr_T1inFunction_read, t1inFunction);
    //*attr_T1inFunction_read = t1inFunction;
    m_libera->UpdateScalar(attr_T1IdInput_read, t1IdInput); //**
    //*attr_T1ID_read = t1ID;
    m_libera->UpdateScalar(attr_T1Direction_read, t1Direction);
    //*attr_T1Direction_read = t1Direction;
    m_libera->UpdateScalar(attr_T1EdgeFalling_read, t1EdgeFalling);
    //*attr_T1EdgeFalling_read = t1EdgeFalling;
    m_libera->UpdateScalar(attr_T1EdgeRising_read, t1EdgeRising);
    //*attr_T1EdgeRising_read = t1EdgeRising;
    m_libera->UpdateScalar(attr_T1State_read, t1State);
    m_libera->UpdateScalar(attr_T1Duration_read, t1Duration);
    m_libera->UpdateScalar(attr_T1idOutput_read, t1idOutput);
    m_libera->UpdateScalar(attr_RtcT1inMask_read, rtcT1inMask);

    //T2
    //*attr_T2Source_read = t2Source;
    m_libera->UpdateScalar(attr_T2Source_read, t2Source);
    //*attr_T2inMask_read = t2inMask;
    m_libera->UpdateScalar(attr_T2inMask_read, t2inMask);
    //*attr_T2inFunction_read = t2inFunction;
    m_libera->UpdateScalar(attr_T2inFunction_read, t2inFunction);
    //*attr_T2ID_read = t2ID;
    m_libera->UpdateScalar(attr_T2IdInput_read, t2IdInput); //**
    //*attr_T2Direction_read = t2Direction;
    m_libera->UpdateScalar(attr_T2Direction_read, t2Direction);
    //*attr_T2EdgeFalling_read = t2EdgeFalling;
    m_libera->UpdateScalar(attr_T2EdgeFalling_read, t2EdgeFalling);
    //*attr_T2EdgeRising_read = t2EdgeRising;
    m_libera->UpdateScalar(attr_T2EdgeRising_read, t2EdgeRising);
    m_libera->UpdateScalar(attr_T2State_read, t2State);
    m_libera->UpdateScalar(attr_T2idOutput_read, t2idOutput);
    m_libera->UpdateScalar(attr_T2Duration_read, t2Duration);
    m_libera->UpdateScalar(attr_RtcT2inMask_read, rtcT2inMask);


    //InterlockId
    m_libera->UpdateScalar(attr_InterlockID_read, interlockId); //**
    m_libera->UpdateScalar(attr_MgtOut_read, mgtOut); //**

	}
	catch (...)
	{
		m_state = Tango::FAULT;
//		m_status = Tango::UNKNOWN;
		return;
	}
}// //--------------------------------------------------------
// //--------------------------------------------------------
// /**
//  *	Read attribute LiberaModel related method
//  *	Description: The Libera Model: 0:Electron, 1:Brillance, 2:Photon
//  *
//  *	Data type:	Tango::DevUShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaEventReceiver::read_LiberaModel(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaEventReceiver::read_LiberaModel(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_LiberaModel_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute Temp2 related method
//  *	Description: Temperature of the hottest component on the chassis 
//  *               interconnection board is returned.
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaEventReceiver::read_Temp2(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaEventReceiver::read_Temp2(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Temp2_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute Fan1Speed related method
//  *	Description: Provides minimal fan speed reading of all three fans on 
//  *               the left side of the chassis in order to identify if the fan 
//  *               module (consisting of 3 fans) is broken returned value 
//  *               0 means that at least one fan has stopped.
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaEventReceiver::read_Fan1Speed(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaEventReceiver::read_Fan1Speed(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Fan1Speed_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute Fan2Speed related method
//  *	Description: Provides minimal fan speed reading of all three fans on 
//  *               the right side of the chassis in order to identify if the fan 
//  *               module (consisting of 3 fans) is broken returned value 
//  *               0 means that at least one fan has stopped.
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaEventReceiver::read_Fan2Speed(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaEventReceiver::read_Fan2Speed(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Fan2Speed_read);
// 	
// }

// //--------------------------------------------------------
// /**
//  *	Read attribute Temp3 related method
//  *	Description: Temperature of the hottest component on the timing 
//  *               module is returned.
//  *
//  *	Data type:	Tango::DevShort
//  *	Attr type:	Scalar
//  */
// //--------------------------------------------------------
// void LiberaEventReceiver::read_Temp3(Tango::Attribute &attr)
// {
// 	DEBUG_STREAM << "LiberaEventReceiver::read_Temp3(Tango::Attribute &attr) entering... " << endl;
// 	//	Set the attribute value
// 	attr.set_value(attr_Temp3_read);
// 	
// }


/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiver::namespace_ending
} //	namespace
