/*----- PROTECTED REGION ID(LiberaEventReceiverClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        LiberaEventReceiverClass.cpp
//
// description : C++ source for the LiberaEventReceiverClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the LiberaEventReceiver once per process.
//
// project :     Libera BPM Event Receiver Device Server
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <LiberaEventReceiverClass.h>

/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass.cpp

//-------------------------------------------------------------------
/**
 *	Create LiberaEventReceiverClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_LiberaEventReceiver_class(const char *name) {
		return LiberaEventReceiver_ns::LiberaEventReceiverClass::init(name);
	}
}

namespace LiberaEventReceiver_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
LiberaEventReceiverClass *LiberaEventReceiverClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		LiberaEventReceiverClass::LiberaEventReceiverClass(string &s)
 * description : 	constructor for the LiberaEventReceiverClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
LiberaEventReceiverClass::LiberaEventReceiverClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering LiberaEventReceiverClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();

	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::constructor

	cout2 << "Leaving LiberaEventReceiverClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		LiberaEventReceiverClass::~LiberaEventReceiverClass()
 * description : 	destructor for the LiberaEventReceiverClass
 */
//--------------------------------------------------------
LiberaEventReceiverClass::~LiberaEventReceiverClass()
{
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		LiberaEventReceiverClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
LiberaEventReceiverClass *LiberaEventReceiverClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new LiberaEventReceiverClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		LiberaEventReceiverClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
LiberaEventReceiverClass *LiberaEventReceiverClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		GetParametersClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetParametersClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GetParametersClass::execute(): arrived" << endl;
	return insert((static_cast<LiberaEventReceiver *>(device))->get_parameters());
}

//--------------------------------------------------------
/**
 * method : 		ReloadSystemPropertiesClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ReloadSystemPropertiesClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ReloadSystemPropertiesClass::execute(): arrived" << endl;
	((static_cast<LiberaEventReceiver *>(device))->reload_system_properties());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		MagicCommandClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *MagicCommandClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "MagicCommandClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<LiberaEventReceiver *>(device))->magic_command(argin));
}

//--------------------------------------------------------
/**
 * method : 		AnnounceSynchronizationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AnnounceSynchronizationClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "AnnounceSynchronizationClass::execute(): arrived" << endl;
	((static_cast<LiberaEventReceiver *>(device))->announce_synchronization());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ForceInitSettingsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ForceInitSettingsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ForceInitSettingsClass::execute(): arrived" << endl;
	((static_cast<LiberaEventReceiver *>(device))->force_init_settings());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SetTraceLevelClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetTraceLevelClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetTraceLevelClass::execute(): arrived" << endl;
	Tango::DevUShort argin;
	extract(in_any, argin);
	((static_cast<LiberaEventReceiver *>(device))->set_trace_level(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		StartSynchronizationClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *StartSynchronizationClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "StartSynchronizationClass::execute(): arrived" << endl;
	((static_cast<LiberaEventReceiver *>(device))->start_synchronization());
	return new CORBA::Any();
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaEventReceiverClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaEventReceiverClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum LiberaEventReceiverClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::get_class_property()
 *	Description : Read database to initialize class property data members.
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::get_class_property()
{
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::get_class_property_before) ENABLED START -----*/
	
	//	Initialize class property data members
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::get_class_property_before
	//	Read class properties from database.
	cl_prop.push_back(Tango::DbDatum("Institute"));
	
	//	Call database and extract values
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;

	//	Try to extract Institute value
	if (cl_prop[++i].is_empty()==false)	cl_prop[i]  >>  institute;
	else
	{
		//	Check default value for Institute
		def_prop = get_default_class_property(cl_prop[i].name);
		if (def_prop.is_empty()==false)
		{
			def_prop    >>  institute;
			cl_prop[i]  <<  institute;
		}
	}
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::get_class_property_after) ENABLED START -----*/
	
	//	Check class property data members init
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::get_class_property_after

}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties
	prop_name = "Institute";
	prop_desc = "0: TANGO_INSTITUTE (GENERIC)\n1: ALBA\n2: ESRF\n3: ELETTRA\n4: SOLEIL";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		cl_def_prop.push_back(data);
		add_wiz_class_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_class_prop(prop_name, prop_desc);

	//	Set Default device Properties
	prop_name = "LiberaIpAddr";
	prop_desc = "The Libera IP address [no default value]";
	prop_def  = "127.0.0.1";
	vect_data.clear();
	vect_data.push_back("127.0.0.1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "LiberaPort";
	prop_desc = "The port on which the generic server handles external requests. Defaults to 23721.";
	prop_def  = "23271";
	vect_data.clear();
	vect_data.push_back("23271");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "LiberaMulticastIpAddr";
	prop_desc = "Asynch. notifications (e.g. trigger events) will be send to this addr [no default value]";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Location";
	prop_desc = "The BPM location [TL1, BOOSTER, TL2 or STORAGE_RING]. No default value.";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "Institute";
	prop_desc = "0: TANGO_INSTITUTE (GENERIC)\n1: ALBA\n2: ESRF\n3: ELETTRA\n4: SOLEIL";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MCDecoderSwitch";
	prop_desc = "MC-Config property - MC decoder switch: Enumeration (off,on,debug)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MCSource";
	prop_desc = "Trigger line source selection - (Off,External,Internal,Pulse,LXI,RTC)";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0Direction";
	prop_desc = "t0 port direction -  (Input,Output)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0OutType";
	prop_desc = "t0 port type -  (Off,Trigger,T3,SFP)";
	prop_def  = "3";
	vect_data.clear();
	vect_data.push_back("3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0State";
	prop_desc = "state of active signal: high (logical 1) or low (logical 0)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1Source";
	prop_desc = "Enumeration Value (Off,External,Internal,Pulse,LXI,RTC)";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2Source";
	prop_desc = "Enumeration Value (Off,External,Internal,Pulse,LXI,RTC)";
	prop_def  = "5";
	vect_data.clear();
	vect_data.push_back("5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MgtOut";
	prop_desc = "Enumeration Value (off,sfp_in,debug,connectors)";
	prop_def  = "3";
	vect_data.clear();
	vect_data.push_back("3");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MCinMask";
	prop_desc = "MC Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.";
	prop_def  = "256";
	vect_data.clear();
	vect_data.push_back("256");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "MCinFunction";
	prop_desc = "MC Function array (in_function) contains 16-bit entries that define the value of masked bits.";
	prop_def  = "256";
	vect_data.clear();
	vect_data.push_back("256");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0inMask";
	prop_desc = "T0 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.";
	prop_def  = "255";
	vect_data.clear();
	vect_data.push_back("255");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1inMask";
	prop_desc = "T1 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.";
	prop_def  = "255";
	vect_data.clear();
	vect_data.push_back("255");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2inMask";
	prop_desc = "T2 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.";
	prop_def  = "255";
	vect_data.clear();
	vect_data.push_back("255");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0idOutput";
	prop_desc = "T0 Function array (in_function) contains 16-bit entries that define the value of masked bits.";
	prop_def  = "144";
	vect_data.clear();
	vect_data.push_back("144");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1inFunction";
	prop_desc = "T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.";
	prop_def  = "145";
	vect_data.clear();
	vect_data.push_back("145");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2inFunction";
	prop_desc = "T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.";
	prop_def  = "161";
	vect_data.clear();
	vect_data.push_back("161");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0Duration";
	prop_desc = "Duration of signal active pulse";
	prop_def  = "100000000";
	vect_data.clear();
	vect_data.push_back("100000000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T0Delay";
	prop_desc = "Delay before transmission starts, set in cycles at fSFP";
	prop_def  = "0";
	vect_data.clear();
	vect_data.push_back("0");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "InterlockId";
	prop_desc = "oversaturation or X-Y orbit threshold";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1EdgeFalling";
	prop_desc = "T1 Edge Falling";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2EdgeFalling";
	prop_desc = "T2 Edge Falling";
	prop_def  = "true";
	vect_data.clear();
	vect_data.push_back("true");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1EdgeRising";
	prop_desc = "T2 Edge Falling";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2EdgeRising";
	prop_desc = "T2 Edge Falling";
	prop_def  = "false";
	vect_data.clear();
	vect_data.push_back("false");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1Direction";
	prop_desc = "t1 port direction -  (Input,Output)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2Direction";
	prop_desc = "t2 port direction -  (Input,Output)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1IdInput";
	prop_desc = "T1 Optical event ID";
	prop_def  = "21";
	vect_data.clear();
	vect_data.push_back("21");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2IdInput";
	prop_desc = "T2 Optical event ID";
	prop_def  = "62";
	vect_data.clear();
	vect_data.push_back("62");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "ErrorTrace";
	prop_desc = "Trace Error functionality for the Libera, by default is Disabled:\n * Value: OutPut ,  TraceLevel\n	* Output[0] :  OutPut on Screen = 0\n	                         OutPut on File = 0 (﻿/var/tmp/ds.log/LiberaMciTrace.log)\n	* TraceLevel[1] : ﻿   Off     = 0,\n        		      Low     = 1,\n		      Med     = 2,\n		      High    = 3,\n		      Detail  = 4";
	prop_def  = "";
	vect_data.clear();
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2State";
	prop_desc = "state of active signal: high (logical 1) or low (logical 0)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1State";
	prop_desc = "state of active signal: high (logical 1) or low (logical 0)";
	prop_def  = "1";
	vect_data.clear();
	vect_data.push_back("1");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1Duration";
	prop_desc = "Duration of signal active pulse";
	prop_def  = "100000000";
	vect_data.clear();
	vect_data.push_back("100000000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T1idOutput";
	prop_desc = "T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.";
	prop_def  = "161";
	vect_data.clear();
	vect_data.push_back("161");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2idOutput";
	prop_desc = "T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.";
	prop_def  = "254";
	vect_data.clear();
	vect_data.push_back("254");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "T2Duration";
	prop_desc = "Duration of signal active pulse";
	prop_def  = "100000000";
	vect_data.clear();
	vect_data.push_back("100000000");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RtcT1inMask";
	prop_desc = "evrx2.rtc.t1.in_mask";
	prop_def  = "255";
	vect_data.clear();
	vect_data.push_back("255");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
	prop_name = "RtcT2inMask";
	prop_desc = "evrx2.rtc.t2.in_mask";
	prop_def  = "255";
	vect_data.clear();
	vect_data.push_back("255");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("Libera BPM Event Receiver Device Server");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("IT Libera BPM Event Receiver Device Server.");
	str_desc.push_back("The interface should be the same as for the Brillance model.");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("LiberaEventReceiver");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new LiberaEventReceiver(this, (*devlist_ptr)[i]));
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		LiberaEventReceiver *dev = static_cast<LiberaEventReceiver *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::attribute_factory_before
	//	Attribute : PMNotificationCounter
	PMNotificationCounterAttrib	*pmnotificationcounter = new PMNotificationCounterAttrib();
	Tango::UserDefaultAttrProp	pmnotificationcounter_prop;
	pmnotificationcounter_prop.set_description("Number a PM event recieved since last Init");
	pmnotificationcounter_prop.set_label("PM Notif. Counter");
	//	unit	not set for PMNotificationCounter
	//	standard_unit	not set for PMNotificationCounter
	//	display_unit	not set for PMNotificationCounter
	pmnotificationcounter_prop.set_format("%8d");
	//	max_value	not set for PMNotificationCounter
	//	min_value	not set for PMNotificationCounter
	//	max_alarm	not set for PMNotificationCounter
	//	min_alarm	not set for PMNotificationCounter
	//	max_warning	not set for PMNotificationCounter
	//	min_warning	not set for PMNotificationCounter
	//	delta_t	not set for PMNotificationCounter
	//	delta_val	not set for PMNotificationCounter
	
	pmnotificationcounter->set_default_properties(pmnotificationcounter_prop);
	//	Not Polled
	pmnotificationcounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(pmnotificationcounter);

	//	Attribute : OffsetTune
	OffsetTuneAttrib	*offsettune = new OffsetTuneAttrib();
	Tango::UserDefaultAttrProp	offsettune_prop;
	offsettune_prop.set_description("Sets the offset tune value, 1 unit is approximately 40 Hz. \nDefault value is 0 (precisely tuned).");
	offsettune_prop.set_label("OffsetTune");
	offsettune_prop.set_unit("x 40Hz");
	//	standard_unit	not set for OffsetTune
	//	display_unit	not set for OffsetTune
	offsettune_prop.set_format("%3d");
	offsettune_prop.set_max_value("500");
	offsettune_prop.set_min_value("-500");
	//	max_alarm	not set for OffsetTune
	//	min_alarm	not set for OffsetTune
	//	max_warning	not set for OffsetTune
	//	min_warning	not set for OffsetTune
	//	delta_t	not set for OffsetTune
	//	delta_val	not set for OffsetTune
	
	offsettune->set_default_properties(offsettune_prop);
	//	Not Polled
	offsettune->set_disp_level(Tango::OPERATOR);
	offsettune->set_memorized();
	offsettune->set_memorized_init(true);
	att_list.push_back(offsettune);

	//	Attribute : CompensateTune
	CompensateTuneAttrib	*compensatetune = new CompensateTuneAttrib();
	Tango::UserDefaultAttrProp	compensatetune_prop;
	compensatetune_prop.set_description("To enable double offset-tune, issue the following command \n(to disable it, just use false instead of true).");
	compensatetune_prop.set_label("Compensate Tune");
	//	unit	not set for CompensateTune
	//	standard_unit	not set for CompensateTune
	//	display_unit	not set for CompensateTune
	//	format	not set for CompensateTune
	//	max_value	not set for CompensateTune
	//	min_value	not set for CompensateTune
	//	max_alarm	not set for CompensateTune
	//	min_alarm	not set for CompensateTune
	//	max_warning	not set for CompensateTune
	//	min_warning	not set for CompensateTune
	//	delta_t	not set for CompensateTune
	//	delta_val	not set for CompensateTune
	
	compensatetune->set_default_properties(compensatetune_prop);
	//	Not Polled
	compensatetune->set_disp_level(Tango::OPERATOR);
	compensatetune->set_memorized();
	compensatetune->set_memorized_init(true);
	att_list.push_back(compensatetune);

	//	Attribute : MCPLLStatus
	MCPLLStatusAttrib	*mcpllstatus = new MCPLLStatusAttrib();
	Tango::UserDefaultAttrProp	mcpllstatus_prop;
	mcpllstatus_prop.set_description("Indicates the MC PLL status (1=locked, 0=unlocked)");
	mcpllstatus_prop.set_label("MC PLL Locked");
	//	unit	not set for MCPLLStatus
	//	standard_unit	not set for MCPLLStatus
	//	display_unit	not set for MCPLLStatus
	mcpllstatus_prop.set_format("%8d");
	//	max_value	not set for MCPLLStatus
	//	min_value	not set for MCPLLStatus
	//	max_alarm	not set for MCPLLStatus
	//	min_alarm	not set for MCPLLStatus
	//	max_warning	not set for MCPLLStatus
	//	min_warning	not set for MCPLLStatus
	//	delta_t	not set for MCPLLStatus
	//	delta_val	not set for MCPLLStatus
	
	mcpllstatus->set_default_properties(mcpllstatus_prop);
	//	Not Polled
	mcpllstatus->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(mcpllstatus);

	//	Attribute : Temp3
	Temp3Attrib	*temp3 = new Temp3Attrib();
	Tango::UserDefaultAttrProp	temp3_prop;
	temp3_prop.set_description("Temperature of the hottest component on the timing \nmodule is returned.");
	temp3_prop.set_label("Evrx Temperature");
	temp3_prop.set_unit("deg.C");
	//	standard_unit	not set for Temp3
	//	display_unit	not set for Temp3
	temp3_prop.set_format("%8d");
	//	max_value	not set for Temp3
	//	min_value	not set for Temp3
	temp3_prop.set_max_alarm("75");
	temp3_prop.set_min_alarm("5");
	temp3_prop.set_max_warning("72");
	temp3_prop.set_min_warning("10");
	//	delta_t	not set for Temp3
	//	delta_val	not set for Temp3
	
	temp3->set_default_properties(temp3_prop);
	//	Not Polled
	temp3->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(temp3);

	//	Attribute : T0Delay
	T0DelayAttrib	*t0delay = new T0DelayAttrib();
	Tango::UserDefaultAttrProp	t0delay_prop;
	t0delay_prop.set_description("Delay before transmission starts, set in cycles at fSFP");
	t0delay_prop.set_label("Delay before transmission");
	t0delay_prop.set_unit("Cycles fSFP");
	//	standard_unit	not set for T0Delay
	//	display_unit	not set for T0Delay
	//	format	not set for T0Delay
	//	max_value	not set for T0Delay
	//	min_value	not set for T0Delay
	//	max_alarm	not set for T0Delay
	//	min_alarm	not set for T0Delay
	//	max_warning	not set for T0Delay
	//	min_warning	not set for T0Delay
	//	delta_t	not set for T0Delay
	//	delta_val	not set for T0Delay
	
	t0delay->set_default_properties(t0delay_prop);
	//	Not Polled
	t0delay->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(t0delay);

	//	Attribute : RtcDecoderSwitch
	RtcDecoderSwitchAttrib	*rtcdecoderswitch = new RtcDecoderSwitchAttrib();
	Tango::UserDefaultAttrProp	rtcdecoderswitch_prop;
	rtcdecoderswitch_prop.set_description("RTC decoding switch of optical stream");
	rtcdecoderswitch_prop.set_label("RTC decoding switch");
	//	unit	not set for RtcDecoderSwitch
	//	standard_unit	not set for RtcDecoderSwitch
	//	display_unit	not set for RtcDecoderSwitch
	//	format	not set for RtcDecoderSwitch
	//	max_value	not set for RtcDecoderSwitch
	//	min_value	not set for RtcDecoderSwitch
	//	max_alarm	not set for RtcDecoderSwitch
	//	min_alarm	not set for RtcDecoderSwitch
	//	max_warning	not set for RtcDecoderSwitch
	//	min_warning	not set for RtcDecoderSwitch
	//	delta_t	not set for RtcDecoderSwitch
	//	delta_val	not set for RtcDecoderSwitch
	
	rtcdecoderswitch->set_default_properties(rtcdecoderswitch_prop);
	//	Not Polled
	rtcdecoderswitch->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(rtcdecoderswitch);

	//	Attribute : McSource
	McSourceAttrib	*mcsource = new McSourceAttrib();
	Tango::UserDefaultAttrProp	mcsource_prop;
	mcsource_prop.set_description("Trigger line source selection");
	mcsource_prop.set_label("MC Source");
	//	unit	not set for McSource
	//	standard_unit	not set for McSource
	//	display_unit	not set for McSource
	//	format	not set for McSource
	//	max_value	not set for McSource
	//	min_value	not set for McSource
	//	max_alarm	not set for McSource
	//	min_alarm	not set for McSource
	//	max_warning	not set for McSource
	//	min_warning	not set for McSource
	//	delta_t	not set for McSource
	//	delta_val	not set for McSource
	
	mcsource->set_default_properties(mcsource_prop);
	//	Not Polled
	mcsource->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(mcsource);

	//	Attribute : T0Direction
	T0DirectionAttrib	*t0direction = new T0DirectionAttrib();
	Tango::UserDefaultAttrProp	t0direction_prop;
	t0direction_prop.set_description("t0 port direction");
	t0direction_prop.set_label("t0 Direction");
	//	unit	not set for T0Direction
	//	standard_unit	not set for T0Direction
	//	display_unit	not set for T0Direction
	//	format	not set for T0Direction
	//	max_value	not set for T0Direction
	//	min_value	not set for T0Direction
	//	max_alarm	not set for T0Direction
	//	min_alarm	not set for T0Direction
	//	max_warning	not set for T0Direction
	//	min_warning	not set for T0Direction
	//	delta_t	not set for T0Direction
	//	delta_val	not set for T0Direction
	
	t0direction->set_default_properties(t0direction_prop);
	//	Not Polled
	t0direction->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0direction);

	//	Attribute : T0OutputType
	T0OutputTypeAttrib	*t0outputtype = new T0OutputTypeAttrib();
	Tango::UserDefaultAttrProp	t0outputtype_prop;
	t0outputtype_prop.set_description("t0 output type");
	t0outputtype_prop.set_label("t0 output");
	//	unit	not set for T0OutputType
	//	standard_unit	not set for T0OutputType
	//	display_unit	not set for T0OutputType
	//	format	not set for T0OutputType
	//	max_value	not set for T0OutputType
	//	min_value	not set for T0OutputType
	//	max_alarm	not set for T0OutputType
	//	min_alarm	not set for T0OutputType
	//	max_warning	not set for T0OutputType
	//	min_warning	not set for T0OutputType
	//	delta_t	not set for T0OutputType
	//	delta_val	not set for T0OutputType
	
	t0outputtype->set_default_properties(t0outputtype_prop);
	//	Not Polled
	t0outputtype->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0outputtype);

	//	Attribute : T0State
	T0StateAttrib	*t0state = new T0StateAttrib();
	Tango::UserDefaultAttrProp	t0state_prop;
	t0state_prop.set_description("state of active signal: high (logical 1) or low (logical 0)");
	t0state_prop.set_label("t0 signal state");
	//	unit	not set for T0State
	//	standard_unit	not set for T0State
	//	display_unit	not set for T0State
	//	format	not set for T0State
	//	max_value	not set for T0State
	//	min_value	not set for T0State
	//	max_alarm	not set for T0State
	//	min_alarm	not set for T0State
	//	max_warning	not set for T0State
	//	min_warning	not set for T0State
	//	delta_t	not set for T0State
	//	delta_val	not set for T0State
	
	t0state->set_default_properties(t0state_prop);
	//	Not Polled
	t0state->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0state);

	//	Attribute : T1Source
	T1SourceAttrib	*t1source = new T1SourceAttrib();
	Tango::UserDefaultAttrProp	t1source_prop;
	t1source_prop.set_description("Trigger line source selection");
	t1source_prop.set_label("t1 Source");
	//	unit	not set for T1Source
	//	standard_unit	not set for T1Source
	//	display_unit	not set for T1Source
	//	format	not set for T1Source
	//	max_value	not set for T1Source
	//	min_value	not set for T1Source
	//	max_alarm	not set for T1Source
	//	min_alarm	not set for T1Source
	//	max_warning	not set for T1Source
	//	min_warning	not set for T1Source
	//	delta_t	not set for T1Source
	//	delta_val	not set for T1Source
	
	t1source->set_default_properties(t1source_prop);
	//	Not Polled
	t1source->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(t1source);

	//	Attribute : T2Source
	T2SourceAttrib	*t2source = new T2SourceAttrib();
	Tango::UserDefaultAttrProp	t2source_prop;
	t2source_prop.set_description("Trigger line source selection");
	t2source_prop.set_label("t2 Source");
	//	unit	not set for T2Source
	//	standard_unit	not set for T2Source
	//	display_unit	not set for T2Source
	//	format	not set for T2Source
	//	max_value	not set for T2Source
	//	min_value	not set for T2Source
	//	max_alarm	not set for T2Source
	//	min_alarm	not set for T2Source
	//	max_warning	not set for T2Source
	//	min_warning	not set for T2Source
	//	delta_t	not set for T2Source
	//	delta_val	not set for T2Source
	
	t2source->set_default_properties(t2source_prop);
	//	Not Polled
	t2source->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(t2source);

	//	Attribute : MgtOut
	MgtOutAttrib	*mgtout = new MgtOutAttrib();
	Tango::UserDefaultAttrProp	mgtout_prop;
	mgtout_prop.set_description("MGT OUT selection off,sfp_in,debug,connectors");
	mgtout_prop.set_label("MGT OUT");
	//	unit	not set for MgtOut
	//	standard_unit	not set for MgtOut
	//	display_unit	not set for MgtOut
	//	format	not set for MgtOut
	//	max_value	not set for MgtOut
	//	min_value	not set for MgtOut
	//	max_alarm	not set for MgtOut
	//	min_alarm	not set for MgtOut
	//	max_warning	not set for MgtOut
	//	min_warning	not set for MgtOut
	//	delta_t	not set for MgtOut
	//	delta_val	not set for MgtOut
	
	mgtout->set_default_properties(mgtout_prop);
	//	Not Polled
	mgtout->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(mgtout);

	//	Attribute : T0inMask
	T0inMaskAttrib	*t0inmask = new T0inMaskAttrib();
	Tango::UserDefaultAttrProp	t0inmask_prop;
	t0inmask_prop.set_description("T0 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.");
	t0inmask_prop.set_label("T0 Masking Array");
	//	unit	not set for T0inMask
	//	standard_unit	not set for T0inMask
	//	display_unit	not set for T0inMask
	//	format	not set for T0inMask
	//	max_value	not set for T0inMask
	//	min_value	not set for T0inMask
	//	max_alarm	not set for T0inMask
	//	min_alarm	not set for T0inMask
	//	max_warning	not set for T0inMask
	//	min_warning	not set for T0inMask
	//	delta_t	not set for T0inMask
	//	delta_val	not set for T0inMask
	
	t0inmask->set_default_properties(t0inmask_prop);
	//	Not Polled
	t0inmask->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0inmask);

	//	Attribute : T1inMask
	T1inMaskAttrib	*t1inmask = new T1inMaskAttrib();
	Tango::UserDefaultAttrProp	t1inmask_prop;
	t1inmask_prop.set_description("T1 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.");
	t1inmask_prop.set_label("T1 SFP Connectors inMask");
	//	unit	not set for T1inMask
	//	standard_unit	not set for T1inMask
	//	display_unit	not set for T1inMask
	//	format	not set for T1inMask
	//	max_value	not set for T1inMask
	//	min_value	not set for T1inMask
	//	max_alarm	not set for T1inMask
	//	min_alarm	not set for T1inMask
	//	max_warning	not set for T1inMask
	//	min_warning	not set for T1inMask
	//	delta_t	not set for T1inMask
	//	delta_val	not set for T1inMask
	
	t1inmask->set_default_properties(t1inmask_prop);
	//	Not Polled
	t1inmask->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1inmask);

	//	Attribute : T2inMask
	T2inMaskAttrib	*t2inmask = new T2inMaskAttrib();
	Tango::UserDefaultAttrProp	t2inmask_prop;
	t2inmask_prop.set_description("T2 Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.");
	t2inmask_prop.set_label("T2 SFP Connectors inMask");
	//	unit	not set for T2inMask
	//	standard_unit	not set for T2inMask
	//	display_unit	not set for T2inMask
	//	format	not set for T2inMask
	//	max_value	not set for T2inMask
	//	min_value	not set for T2inMask
	//	max_alarm	not set for T2inMask
	//	min_alarm	not set for T2inMask
	//	max_warning	not set for T2inMask
	//	min_warning	not set for T2inMask
	//	delta_t	not set for T2inMask
	//	delta_val	not set for T2inMask
	
	t2inmask->set_default_properties(t2inmask_prop);
	//	Not Polled
	t2inmask->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2inmask);

	//	Attribute : T0idOutput
	T0idOutputAttrib	*t0idoutput = new T0idOutputAttrib();
	Tango::UserDefaultAttrProp	t0idoutput_prop;
	t0idoutput_prop.set_description("T0 Function array (in_function) contains 16-bit entries that define the value of masked bits.");
	t0idoutput_prop.set_label("T0 Function array");
	//	unit	not set for T0idOutput
	//	standard_unit	not set for T0idOutput
	//	display_unit	not set for T0idOutput
	//	format	not set for T0idOutput
	//	max_value	not set for T0idOutput
	//	min_value	not set for T0idOutput
	//	max_alarm	not set for T0idOutput
	//	min_alarm	not set for T0idOutput
	//	max_warning	not set for T0idOutput
	//	min_warning	not set for T0idOutput
	//	delta_t	not set for T0idOutput
	//	delta_val	not set for T0idOutput
	
	t0idoutput->set_default_properties(t0idoutput_prop);
	//	Not Polled
	t0idoutput->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0idoutput);

	//	Attribute : T1inFunction
	T1inFunctionAttrib	*t1infunction = new T1inFunctionAttrib();
	Tango::UserDefaultAttrProp	t1infunction_prop;
	t1infunction_prop.set_description("T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.");
	t1infunction_prop.set_label("T1 Function array");
	//	unit	not set for T1inFunction
	//	standard_unit	not set for T1inFunction
	//	display_unit	not set for T1inFunction
	//	format	not set for T1inFunction
	//	max_value	not set for T1inFunction
	//	min_value	not set for T1inFunction
	//	max_alarm	not set for T1inFunction
	//	min_alarm	not set for T1inFunction
	//	max_warning	not set for T1inFunction
	//	min_warning	not set for T1inFunction
	//	delta_t	not set for T1inFunction
	//	delta_val	not set for T1inFunction
	
	t1infunction->set_default_properties(t1infunction_prop);
	//	Not Polled
	t1infunction->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1infunction);

	//	Attribute : T2inFunction
	T2inFunctionAttrib	*t2infunction = new T2inFunctionAttrib();
	Tango::UserDefaultAttrProp	t2infunction_prop;
	t2infunction_prop.set_description("T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.");
	t2infunction_prop.set_label("T2 Function array");
	//	unit	not set for T2inFunction
	//	standard_unit	not set for T2inFunction
	//	display_unit	not set for T2inFunction
	//	format	not set for T2inFunction
	//	max_value	not set for T2inFunction
	//	min_value	not set for T2inFunction
	//	max_alarm	not set for T2inFunction
	//	min_alarm	not set for T2inFunction
	//	max_warning	not set for T2inFunction
	//	min_warning	not set for T2inFunction
	//	delta_t	not set for T2inFunction
	//	delta_val	not set for T2inFunction
	
	t2infunction->set_default_properties(t2infunction_prop);
	//	Not Polled
	t2infunction->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2infunction);

	//	Attribute : MCinMask
	MCinMaskAttrib	*mcinmask = new MCinMaskAttrib();
	Tango::UserDefaultAttrProp	mcinmask_prop;
	mcinmask_prop.set_description("MC Masking array (in_mask) contains 16-bit entries that select the relevant bits from the 16-bit accelerators timing system.");
	mcinmask_prop.set_label("MC Masking Array");
	//	unit	not set for MCinMask
	//	standard_unit	not set for MCinMask
	//	display_unit	not set for MCinMask
	//	format	not set for MCinMask
	//	max_value	not set for MCinMask
	//	min_value	not set for MCinMask
	//	max_alarm	not set for MCinMask
	//	min_alarm	not set for MCinMask
	//	max_warning	not set for MCinMask
	//	min_warning	not set for MCinMask
	//	delta_t	not set for MCinMask
	//	delta_val	not set for MCinMask
	
	mcinmask->set_default_properties(mcinmask_prop);
	//	Not Polled
	mcinmask->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(mcinmask);

	//	Attribute : MCinFunction
	MCinFunctionAttrib	*mcinfunction = new MCinFunctionAttrib();
	Tango::UserDefaultAttrProp	mcinfunction_prop;
	mcinfunction_prop.set_description("MC Function array (in_function) contains 16-bit entries that define the value of masked bits.");
	mcinfunction_prop.set_label("MC Function array");
	//	unit	not set for MCinFunction
	//	standard_unit	not set for MCinFunction
	//	display_unit	not set for MCinFunction
	//	format	not set for MCinFunction
	//	max_value	not set for MCinFunction
	//	min_value	not set for MCinFunction
	//	max_alarm	not set for MCinFunction
	//	min_alarm	not set for MCinFunction
	//	max_warning	not set for MCinFunction
	//	min_warning	not set for MCinFunction
	//	delta_t	not set for MCinFunction
	//	delta_val	not set for MCinFunction
	
	mcinfunction->set_default_properties(mcinfunction_prop);
	//	Not Polled
	mcinfunction->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(mcinfunction);

	//	Attribute : T0Duration
	T0DurationAttrib	*t0duration = new T0DurationAttrib();
	Tango::UserDefaultAttrProp	t0duration_prop;
	t0duration_prop.set_description("Duration of signal active pulse");
	t0duration_prop.set_label("T0 Duration");
	//	unit	not set for T0Duration
	//	standard_unit	not set for T0Duration
	//	display_unit	not set for T0Duration
	//	format	not set for T0Duration
	//	max_value	not set for T0Duration
	//	min_value	not set for T0Duration
	//	max_alarm	not set for T0Duration
	//	min_alarm	not set for T0Duration
	//	max_warning	not set for T0Duration
	//	min_warning	not set for T0Duration
	//	delta_t	not set for T0Duration
	//	delta_val	not set for T0Duration
	
	t0duration->set_default_properties(t0duration_prop);
	//	Not Polled
	t0duration->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0duration);

	//	Attribute : InterlockID
	InterlockIDAttrib	*interlockid = new InterlockIDAttrib();
	Tango::UserDefaultAttrProp	interlockid_prop;
	interlockid_prop.set_description("Oversaturation or X-Y orbit threshold");
	interlockid_prop.set_label("Interlock ID");
	//	unit	not set for InterlockID
	//	standard_unit	not set for InterlockID
	//	display_unit	not set for InterlockID
	//	format	not set for InterlockID
	//	max_value	not set for InterlockID
	//	min_value	not set for InterlockID
	//	max_alarm	not set for InterlockID
	//	min_alarm	not set for InterlockID
	//	max_warning	not set for InterlockID
	//	min_warning	not set for InterlockID
	//	delta_t	not set for InterlockID
	//	delta_val	not set for InterlockID
	
	interlockid->set_default_properties(interlockid_prop);
	//	Not Polled
	interlockid->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(interlockid);

	//	Attribute : T2EdgeFalling
	T2EdgeFallingAttrib	*t2edgefalling = new T2EdgeFallingAttrib();
	Tango::UserDefaultAttrProp	t2edgefalling_prop;
	//	description	not set for T2EdgeFalling
	t2edgefalling_prop.set_label("T2 Edge Falling");
	t2edgefalling_prop.set_unit("n/a");
	t2edgefalling_prop.set_standard_unit("n/a");
	t2edgefalling_prop.set_display_unit("n/a");
	//	format	not set for T2EdgeFalling
	//	max_value	not set for T2EdgeFalling
	//	min_value	not set for T2EdgeFalling
	//	max_alarm	not set for T2EdgeFalling
	//	min_alarm	not set for T2EdgeFalling
	//	max_warning	not set for T2EdgeFalling
	//	min_warning	not set for T2EdgeFalling
	//	delta_t	not set for T2EdgeFalling
	//	delta_val	not set for T2EdgeFalling
	
	t2edgefalling->set_default_properties(t2edgefalling_prop);
	//	Not Polled
	t2edgefalling->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2edgefalling);

	//	Attribute : T2EdgeRising
	T2EdgeRisingAttrib	*t2edgerising = new T2EdgeRisingAttrib();
	Tango::UserDefaultAttrProp	t2edgerising_prop;
	//	description	not set for T2EdgeRising
	t2edgerising_prop.set_label("T2 Edge Rising");
	t2edgerising_prop.set_unit("n/a");
	t2edgerising_prop.set_standard_unit("n/a");
	t2edgerising_prop.set_display_unit("n/a");
	//	format	not set for T2EdgeRising
	//	max_value	not set for T2EdgeRising
	//	min_value	not set for T2EdgeRising
	//	max_alarm	not set for T2EdgeRising
	//	min_alarm	not set for T2EdgeRising
	//	max_warning	not set for T2EdgeRising
	//	min_warning	not set for T2EdgeRising
	//	delta_t	not set for T2EdgeRising
	//	delta_val	not set for T2EdgeRising
	
	t2edgerising->set_default_properties(t2edgerising_prop);
	//	Not Polled
	t2edgerising->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2edgerising);

	//	Attribute : T1EdgeFalling
	T1EdgeFallingAttrib	*t1edgefalling = new T1EdgeFallingAttrib();
	Tango::UserDefaultAttrProp	t1edgefalling_prop;
	//	description	not set for T1EdgeFalling
	t1edgefalling_prop.set_label("T2 Edge Falling");
	t1edgefalling_prop.set_unit("n/a");
	t1edgefalling_prop.set_standard_unit("n/a");
	t1edgefalling_prop.set_display_unit("n/a");
	//	format	not set for T1EdgeFalling
	//	max_value	not set for T1EdgeFalling
	//	min_value	not set for T1EdgeFalling
	//	max_alarm	not set for T1EdgeFalling
	//	min_alarm	not set for T1EdgeFalling
	//	max_warning	not set for T1EdgeFalling
	//	min_warning	not set for T1EdgeFalling
	//	delta_t	not set for T1EdgeFalling
	//	delta_val	not set for T1EdgeFalling
	
	t1edgefalling->set_default_properties(t1edgefalling_prop);
	//	Not Polled
	t1edgefalling->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1edgefalling);

	//	Attribute : T1EdgeRising
	T1EdgeRisingAttrib	*t1edgerising = new T1EdgeRisingAttrib();
	Tango::UserDefaultAttrProp	t1edgerising_prop;
	//	description	not set for T1EdgeRising
	t1edgerising_prop.set_label("T1 Edge Rising");
	t1edgerising_prop.set_unit("n/a");
	t1edgerising_prop.set_standard_unit("n/a");
	t1edgerising_prop.set_display_unit("n/a");
	//	format	not set for T1EdgeRising
	//	max_value	not set for T1EdgeRising
	//	min_value	not set for T1EdgeRising
	//	max_alarm	not set for T1EdgeRising
	//	min_alarm	not set for T1EdgeRising
	//	max_warning	not set for T1EdgeRising
	//	min_warning	not set for T1EdgeRising
	//	delta_t	not set for T1EdgeRising
	//	delta_val	not set for T1EdgeRising
	
	t1edgerising->set_default_properties(t1edgerising_prop);
	//	Not Polled
	t1edgerising->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1edgerising);

	//	Attribute : T2IdInput
	T2IdInputAttrib	*t2idinput = new T2IdInputAttrib();
	Tango::UserDefaultAttrProp	t2idinput_prop;
	t2idinput_prop.set_description("T2 Optical event ID");
	t2idinput_prop.set_label("T2 ID");
	t2idinput_prop.set_unit("n/a");
	t2idinput_prop.set_standard_unit("n/a");
	t2idinput_prop.set_display_unit("n/a");
	//	format	not set for T2IdInput
	//	max_value	not set for T2IdInput
	//	min_value	not set for T2IdInput
	//	max_alarm	not set for T2IdInput
	//	min_alarm	not set for T2IdInput
	//	max_warning	not set for T2IdInput
	//	min_warning	not set for T2IdInput
	//	delta_t	not set for T2IdInput
	//	delta_val	not set for T2IdInput
	
	t2idinput->set_default_properties(t2idinput_prop);
	//	Not Polled
	t2idinput->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2idinput);

	//	Attribute : T1IdInput
	T1IdInputAttrib	*t1idinput = new T1IdInputAttrib();
	Tango::UserDefaultAttrProp	t1idinput_prop;
	t1idinput_prop.set_description("T1 Optical event ID");
	t1idinput_prop.set_label("T1 ID");
	t1idinput_prop.set_unit("n/a");
	t1idinput_prop.set_standard_unit("n/a");
	t1idinput_prop.set_display_unit("n/a");
	//	format	not set for T1IdInput
	//	max_value	not set for T1IdInput
	//	min_value	not set for T1IdInput
	//	max_alarm	not set for T1IdInput
	//	min_alarm	not set for T1IdInput
	//	max_warning	not set for T1IdInput
	//	min_warning	not set for T1IdInput
	//	delta_t	not set for T1IdInput
	//	delta_val	not set for T1IdInput
	
	t1idinput->set_default_properties(t1idinput_prop);
	//	Not Polled
	t1idinput->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1idinput);

	//	Attribute : T1Direction
	T1DirectionAttrib	*t1direction = new T1DirectionAttrib();
	Tango::UserDefaultAttrProp	t1direction_prop;
	t1direction_prop.set_description("t2 port direction");
	t1direction_prop.set_label("t1 Direction");
	//	unit	not set for T1Direction
	//	standard_unit	not set for T1Direction
	//	display_unit	not set for T1Direction
	//	format	not set for T1Direction
	//	max_value	not set for T1Direction
	//	min_value	not set for T1Direction
	//	max_alarm	not set for T1Direction
	//	min_alarm	not set for T1Direction
	//	max_warning	not set for T1Direction
	//	min_warning	not set for T1Direction
	//	delta_t	not set for T1Direction
	//	delta_val	not set for T1Direction
	
	t1direction->set_default_properties(t1direction_prop);
	//	Not Polled
	t1direction->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1direction);

	//	Attribute : T2Direction
	T2DirectionAttrib	*t2direction = new T2DirectionAttrib();
	Tango::UserDefaultAttrProp	t2direction_prop;
	t2direction_prop.set_description("t2 port direction");
	t2direction_prop.set_label("t2 Direction");
	//	unit	not set for T2Direction
	//	standard_unit	not set for T2Direction
	//	display_unit	not set for T2Direction
	//	format	not set for T2Direction
	//	max_value	not set for T2Direction
	//	min_value	not set for T2Direction
	//	max_alarm	not set for T2Direction
	//	min_alarm	not set for T2Direction
	//	max_warning	not set for T2Direction
	//	min_warning	not set for T2Direction
	//	delta_t	not set for T2Direction
	//	delta_val	not set for T2Direction
	
	t2direction->set_default_properties(t2direction_prop);
	//	Not Polled
	t2direction->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2direction);

	//	Attribute : SynchronizeLMT
	SynchronizeLMTAttrib	*synchronizelmt = new SynchronizeLMTAttrib();
	Tango::UserDefaultAttrProp	synchronizelmt_prop;
	synchronizelmt_prop.set_description("The absolute time synchronization is done for all processor modules simultaneously.  [0, 18446744073709551614]");
	synchronizelmt_prop.set_label("Sync LMT");
	//	unit	not set for SynchronizeLMT
	//	standard_unit	not set for SynchronizeLMT
	//	display_unit	not set for SynchronizeLMT
	//	format	not set for SynchronizeLMT
	//	max_value	not set for SynchronizeLMT
	//	min_value	not set for SynchronizeLMT
	//	max_alarm	not set for SynchronizeLMT
	//	min_alarm	not set for SynchronizeLMT
	//	max_warning	not set for SynchronizeLMT
	//	min_warning	not set for SynchronizeLMT
	//	delta_t	not set for SynchronizeLMT
	//	delta_val	not set for SynchronizeLMT
	
	synchronizelmt->set_default_properties(synchronizelmt_prop);
	//	Not Polled
	synchronizelmt->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(synchronizelmt);

	//	Attribute : RTCTimestamp
	RTCTimestampAttrib	*rtctimestamp = new RTCTimestampAttrib();
	Tango::UserDefaultAttrProp	rtctimestamp_prop;
	rtctimestamp_prop.set_description("Timestamp which is be taken by receiving optical events over SFP when reception is enabled");
	rtctimestamp_prop.set_label("RTC Timestamp");
	//	unit	not set for RTCTimestamp
	//	standard_unit	not set for RTCTimestamp
	//	display_unit	not set for RTCTimestamp
	//	format	not set for RTCTimestamp
	//	max_value	not set for RTCTimestamp
	//	min_value	not set for RTCTimestamp
	//	max_alarm	not set for RTCTimestamp
	//	min_alarm	not set for RTCTimestamp
	//	max_warning	not set for RTCTimestamp
	//	min_warning	not set for RTCTimestamp
	//	delta_t	not set for RTCTimestamp
	//	delta_val	not set for RTCTimestamp
	
	rtctimestamp->set_default_properties(rtctimestamp_prop);
	//	Not Polled
	rtctimestamp->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(rtctimestamp);

	//	Attribute : RTCTimestampState
	RTCTimestampStateAttrib	*rtctimestampstate = new RTCTimestampStateAttrib();
	Tango::UserDefaultAttrProp	rtctimestampstate_prop;
	rtctimestampstate_prop.set_description("State of the timestamp which is be taken by receiving optical events over SFP when reception is enabled");
	rtctimestampstate_prop.set_label("RTC Timestamp State");
	//	unit	not set for RTCTimestampState
	//	standard_unit	not set for RTCTimestampState
	//	display_unit	not set for RTCTimestampState
	//	format	not set for RTCTimestampState
	//	max_value	not set for RTCTimestampState
	//	min_value	not set for RTCTimestampState
	//	max_alarm	not set for RTCTimestampState
	//	min_alarm	not set for RTCTimestampState
	//	max_warning	not set for RTCTimestampState
	//	min_warning	not set for RTCTimestampState
	//	delta_t	not set for RTCTimestampState
	//	delta_val	not set for RTCTimestampState
	
	rtctimestampstate->set_default_properties(rtctimestampstate_prop);
	//	Not Polled
	rtctimestampstate->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(rtctimestampstate);

	//	Attribute : T1State
	T1StateAttrib	*t1state = new T1StateAttrib();
	Tango::UserDefaultAttrProp	t1state_prop;
	t1state_prop.set_description("state of active signal: high (logical 1) or low (logical 0)");
	t1state_prop.set_label("t1 signal state");
	//	unit	not set for T1State
	//	standard_unit	not set for T1State
	//	display_unit	not set for T1State
	//	format	not set for T1State
	//	max_value	not set for T1State
	//	min_value	not set for T1State
	//	max_alarm	not set for T1State
	//	min_alarm	not set for T1State
	//	max_warning	not set for T1State
	//	min_warning	not set for T1State
	//	delta_t	not set for T1State
	//	delta_val	not set for T1State
	
	t1state->set_default_properties(t1state_prop);
	//	Not Polled
	t1state->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1state);

	//	Attribute : T2State
	T2StateAttrib	*t2state = new T2StateAttrib();
	Tango::UserDefaultAttrProp	t2state_prop;
	t2state_prop.set_description("state of active signal: high (logical 1) or low (logical 0)");
	t2state_prop.set_label("t2 signal state");
	//	unit	not set for T2State
	//	standard_unit	not set for T2State
	//	display_unit	not set for T2State
	//	format	not set for T2State
	//	max_value	not set for T2State
	//	min_value	not set for T2State
	//	max_alarm	not set for T2State
	//	min_alarm	not set for T2State
	//	max_warning	not set for T2State
	//	min_warning	not set for T2State
	//	delta_t	not set for T2State
	//	delta_val	not set for T2State
	
	t2state->set_default_properties(t2state_prop);
	//	Not Polled
	t2state->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2state);

	//	Attribute : T1Duration
	T1DurationAttrib	*t1duration = new T1DurationAttrib();
	Tango::UserDefaultAttrProp	t1duration_prop;
	t1duration_prop.set_description("Duration of signal active pulse");
	t1duration_prop.set_label("T1 Duration");
	//	unit	not set for T1Duration
	//	standard_unit	not set for T1Duration
	//	display_unit	not set for T1Duration
	//	format	not set for T1Duration
	//	max_value	not set for T1Duration
	//	min_value	not set for T1Duration
	//	max_alarm	not set for T1Duration
	//	min_alarm	not set for T1Duration
	//	max_warning	not set for T1Duration
	//	min_warning	not set for T1Duration
	//	delta_t	not set for T1Duration
	//	delta_val	not set for T1Duration
	
	t1duration->set_default_properties(t1duration_prop);
	//	Not Polled
	t1duration->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1duration);

	//	Attribute : T1idOutput
	T1idOutputAttrib	*t1idoutput = new T1idOutputAttrib();
	Tango::UserDefaultAttrProp	t1idoutput_prop;
	t1idoutput_prop.set_description("T1 Function array (in_function) contains 16-bit entries that define the value of masked bits.");
	t1idoutput_prop.set_label("T1 Function array");
	//	unit	not set for T1idOutput
	//	standard_unit	not set for T1idOutput
	//	display_unit	not set for T1idOutput
	//	format	not set for T1idOutput
	//	max_value	not set for T1idOutput
	//	min_value	not set for T1idOutput
	//	max_alarm	not set for T1idOutput
	//	min_alarm	not set for T1idOutput
	//	max_warning	not set for T1idOutput
	//	min_warning	not set for T1idOutput
	//	delta_t	not set for T1idOutput
	//	delta_val	not set for T1idOutput
	
	t1idoutput->set_default_properties(t1idoutput_prop);
	//	Not Polled
	t1idoutput->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t1idoutput);

	//	Attribute : T2idOutput
	T2idOutputAttrib	*t2idoutput = new T2idOutputAttrib();
	Tango::UserDefaultAttrProp	t2idoutput_prop;
	t2idoutput_prop.set_description("T2 Function array (in_function) contains 16-bit entries that define the value of masked bits.");
	t2idoutput_prop.set_label("T2 Function array");
	//	unit	not set for T2idOutput
	//	standard_unit	not set for T2idOutput
	//	display_unit	not set for T2idOutput
	//	format	not set for T2idOutput
	//	max_value	not set for T2idOutput
	//	min_value	not set for T2idOutput
	//	max_alarm	not set for T2idOutput
	//	min_alarm	not set for T2idOutput
	//	max_warning	not set for T2idOutput
	//	min_warning	not set for T2idOutput
	//	delta_t	not set for T2idOutput
	//	delta_val	not set for T2idOutput
	
	t2idoutput->set_default_properties(t2idoutput_prop);
	//	Not Polled
	t2idoutput->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2idoutput);

	//	Attribute : T0IdInput
	T0IdInputAttrib	*t0idinput = new T0IdInputAttrib();
	Tango::UserDefaultAttrProp	t0idinput_prop;
	t0idinput_prop.set_description("T0 Optical event ID");
	t0idinput_prop.set_label("T0 ID");
	t0idinput_prop.set_unit("n/a");
	t0idinput_prop.set_standard_unit("n/a");
	t0idinput_prop.set_display_unit("n/a");
	//	format	not set for T0IdInput
	//	max_value	not set for T0IdInput
	//	min_value	not set for T0IdInput
	//	max_alarm	not set for T0IdInput
	//	min_alarm	not set for T0IdInput
	//	max_warning	not set for T0IdInput
	//	min_warning	not set for T0IdInput
	//	delta_t	not set for T0IdInput
	//	delta_val	not set for T0IdInput
	
	t0idinput->set_default_properties(t0idinput_prop);
	//	Not Polled
	t0idinput->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t0idinput);

	//	Attribute : T2Duration
	T2DurationAttrib	*t2duration = new T2DurationAttrib();
	Tango::UserDefaultAttrProp	t2duration_prop;
	t2duration_prop.set_description("Duration of signal active pulse");
	t2duration_prop.set_label("T2 Duration");
	//	unit	not set for T2Duration
	//	standard_unit	not set for T2Duration
	//	display_unit	not set for T2Duration
	//	format	not set for T2Duration
	//	max_value	not set for T2Duration
	//	min_value	not set for T2Duration
	//	max_alarm	not set for T2Duration
	//	min_alarm	not set for T2Duration
	//	max_warning	not set for T2Duration
	//	min_warning	not set for T2Duration
	//	delta_t	not set for T2Duration
	//	delta_val	not set for T2Duration
	
	t2duration->set_default_properties(t2duration_prop);
	//	Not Polled
	t2duration->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(t2duration);

	//	Attribute : RtcT1inMask
	RtcT1inMaskAttrib	*rtct1inmask = new RtcT1inMaskAttrib();
	Tango::UserDefaultAttrProp	rtct1inmask_prop;
	rtct1inmask_prop.set_description("evrx2.rtc.t1.in_mask");
	rtct1inmask_prop.set_label("RTC T1 inMask");
	//	unit	not set for RtcT1inMask
	//	standard_unit	not set for RtcT1inMask
	//	display_unit	not set for RtcT1inMask
	//	format	not set for RtcT1inMask
	//	max_value	not set for RtcT1inMask
	//	min_value	not set for RtcT1inMask
	//	max_alarm	not set for RtcT1inMask
	//	min_alarm	not set for RtcT1inMask
	//	max_warning	not set for RtcT1inMask
	//	min_warning	not set for RtcT1inMask
	//	delta_t	not set for RtcT1inMask
	//	delta_val	not set for RtcT1inMask
	
	rtct1inmask->set_default_properties(rtct1inmask_prop);
	//	Not Polled
	rtct1inmask->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(rtct1inmask);

	//	Attribute : RtcT2inMask
	RtcT2inMaskAttrib	*rtct2inmask = new RtcT2inMaskAttrib();
	Tango::UserDefaultAttrProp	rtct2inmask_prop;
	rtct2inmask_prop.set_description("evrx2.rtc.t2.in_mask");
	rtct2inmask_prop.set_label("RTC T2 inMask");
	//	unit	not set for RtcT2inMask
	//	standard_unit	not set for RtcT2inMask
	//	display_unit	not set for RtcT2inMask
	//	format	not set for RtcT2inMask
	//	max_value	not set for RtcT2inMask
	//	min_value	not set for RtcT2inMask
	//	max_alarm	not set for RtcT2inMask
	//	min_alarm	not set for RtcT2inMask
	//	max_warning	not set for RtcT2inMask
	//	min_warning	not set for RtcT2inMask
	//	delta_t	not set for RtcT2inMask
	//	delta_val	not set for RtcT2inMask
	
	rtct2inmask->set_default_properties(rtct2inmask_prop);
	//	Not Polled
	rtct2inmask->set_disp_level(Tango::EXPERT);
	//	Not Memorized
	att_list.push_back(rtct2inmask);

	//	Attribute : DDTriggerCounter
	DDTriggerCounterAttrib	*ddtriggercounter = new DDTriggerCounterAttrib();
	Tango::UserDefaultAttrProp	ddtriggercounter_prop;
	ddtriggercounter_prop.set_description("Number of trigger notifications received since last device <init>");
	ddtriggercounter_prop.set_label("Trig.Counter");
	ddtriggercounter_prop.set_unit("a.u.");
	ddtriggercounter_prop.set_standard_unit("a.u.");
	ddtriggercounter_prop.set_display_unit("a.u.");
	ddtriggercounter_prop.set_format("%8d");
	//	max_value	not set for DDTriggerCounter
	//	min_value	not set for DDTriggerCounter
	//	max_alarm	not set for DDTriggerCounter
	//	min_alarm	not set for DDTriggerCounter
	//	max_warning	not set for DDTriggerCounter
	//	min_warning	not set for DDTriggerCounter
	//	delta_t	not set for DDTriggerCounter
	//	delta_val	not set for DDTriggerCounter
	
	ddtriggercounter->set_default_properties(ddtriggercounter_prop);
	//	Not Polled
	ddtriggercounter->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(ddtriggercounter);

	//	Attribute : UserData
	UserDataAttrib	*userdata = new UserDataAttrib();
	Tango::UserDefaultAttrProp	userdata_prop;
	userdata_prop.set_description("User defined data");
	//	label	not set for UserData
	//	unit	not set for UserData
	//	standard_unit	not set for UserData
	//	display_unit	not set for UserData
	//	format	not set for UserData
	//	max_value	not set for UserData
	//	min_value	not set for UserData
	//	max_alarm	not set for UserData
	//	min_alarm	not set for UserData
	//	max_warning	not set for UserData
	//	min_warning	not set for UserData
	//	delta_t	not set for UserData
	//	delta_val	not set for UserData
	
	userdata->set_default_properties(userdata_prop);
	//	Not Polled
	userdata->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(userdata);

	//	Attribute : logs
	logsAttrib	*logs = new logsAttrib();
	Tango::UserDefaultAttrProp	logs_prop;
	//	description	not set for logs
	//	label	not set for logs
	//	unit	not set for logs
	//	standard_unit	not set for logs
	//	display_unit	not set for logs
	//	format	not set for logs
	//	max_value	not set for logs
	//	min_value	not set for logs
	//	max_alarm	not set for logs
	//	min_alarm	not set for logs
	//	max_warning	not set for logs
	//	min_warning	not set for logs
	//	delta_t	not set for logs
	//	delta_val	not set for logs
	
	logs->set_default_properties(logs_prop);
	//	Not Polled
	logs->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(logs);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::command_factory()
{
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::command_factory_before


	//	Command GetParameters
	GetParametersClass	*pGetParametersCmd =
		new GetParametersClass("GetParameters",
			Tango::DEV_VOID, Tango::DEVVAR_DOUBLESTRINGARRAY,
			"N/A",
			"The BPM gain and offsets",
			Tango::OPERATOR);
	command_list.push_back(pGetParametersCmd);

	//	Command ReloadSystemProperties
	ReloadSystemPropertiesClass	*pReloadSystemPropertiesCmd =
		new ReloadSystemPropertiesClass("ReloadSystemProperties",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"n/a",
			"n/a",
			Tango::OPERATOR);
	command_list.push_back(pReloadSystemPropertiesCmd);

	//	Command MagicCommand
	MagicCommandClass	*pMagicCommandCmd =
		new MagicCommandClass("MagicCommand",
			Tango::DEV_STRING, Tango::DEVVAR_STRINGARRAY,
			"absolute path of the node name",
			"value of specified node(s)",
			Tango::EXPERT);
	command_list.push_back(pMagicCommandCmd);

	//	Command AnnounceSynchronization
	AnnounceSynchronizationClass	*pAnnounceSynchronizationCmd =
		new AnnounceSynchronizationClass("AnnounceSynchronization",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"n/a",
			"n/a",
			Tango::OPERATOR);
	command_list.push_back(pAnnounceSynchronizationCmd);

	//	Command ForceInitSettings
	ForceInitSettingsClass	*pForceInitSettingsCmd =
		new ForceInitSettingsClass("ForceInitSettings",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"n/a",
			"n/a",
			Tango::OPERATOR);
	command_list.push_back(pForceInitSettingsCmd);

	//	Command SetTraceLevel
	SetTraceLevelClass	*pSetTraceLevelCmd =
		new SetTraceLevelClass("SetTraceLevel",
			Tango::DEV_USHORT, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetTraceLevelCmd);

	//	Command StartSynchronization
	StartSynchronizationClass	*pStartSynchronizationCmd =
		new StartSynchronizationClass("StartSynchronization",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"n/a",
			"n/a",
			Tango::OPERATOR);
	command_list.push_back(pStartSynchronizationCmd);

	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		LiberaEventReceiverClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		LiberaEventReceiverClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void LiberaEventReceiverClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		LiberaEventReceiver *dev = static_cast<LiberaEventReceiver *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(LiberaEventReceiverClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : LiberaEventReceiverClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *LiberaEventReceiverClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(LiberaEventReceiverClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	LiberaEventReceiverClass::Additional Methods
} //	namespace
